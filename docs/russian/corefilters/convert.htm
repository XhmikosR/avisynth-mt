<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html lang="ru">
<head>
<meta http-equiv="Content-Language" content="ru">
   <meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
   <title> Avisynth Colorspace Conversion Filter</title>
   <link rel="stylesheet" type="text/css" href="../../avisynth.css">
<!--
Automatically generated, don't change:
$Id: convert.htm,v 1.7 2008/09/08 16:43:48 fizick Exp $
-->
</head>
<body>
<h2>
<a NAME="ConvertTo"></a>ConvertToRGB / ConvertToRGB24 / ConvertToRGB32<br>
  ConvertToYUY2 / ConvertBackToYUY2 / ConvertToYV12</h2>
<p><code>ConvertToRGB </code>(<var>clip [, string &quot;matrix&quot;] [, bool "interlaced"]</var>)<br>
  <code>ConvertToRGB24 </code>(<var>clip [, string &quot;matrix&quot;] [, bool "interlaced"]</var>)<br>
  <code>ConvertToRGB32 </code>(<var>clip [, string &quot;matrix&quot;] [, bool "interlaced"]</var>)<br>
  <code>ConvertToYUY2 </code>(<var>clip [, string &quot;matrix&quot;] [, bool "interlaced"]</var>)<br>
<code>ConvertToYV12 </code>(<var>clip [, string &quot;matrix&quot;] [, bool "interlaced"]</var>)<br>
  <code>ConvertBackToYUY2 </code>(<var>clip [, string &quot;matrix&quot;]</var>)


<p>
  <var>matrix</var>: По умолчанию "Rec601". Управляет цветовыми и масштабирующими коэффициентами, используемых при RGB - YUV преобразованиях.
  <ul>
  <li>&quot;Rec601&quot; : Используются коэффициенты Rec.601, масштабируется до ТВ диапазона [16,235].
  <li>&quot;PC.601&quot; : Используются коэффициенты Rec.601, сохраняется весь диапазон[0,255].
  <li>&quot;Rec709&quot; : Используются коэффициенты Rec.709, масштабируется до ТВ диапазона.
  <li>&quot;PC.709&quot; : Используются коэффициенты Rec.709, сохраняется весь диапазон.
  </ul>
<p>
  <var>interlaced</var>: По умолчанию false. Используется чересстрочный алгоритм для YV12 - YUY2/RGB преобразований информации о цвете.
</p>

<p>AviSynth до v2.50 мог работать внутренне только с двумя цветовыми форматами, RGB и YUY2.
 Начиная с v2.50 AviSynth может также работать с третьим цветовым форматом, YV12. 
 Эти фильтры осуществляют преобразование между форматами.
  Если видео уже в указанном формате, то оно проследует через фильтр без изменений.
   RGB в данном документе подразумевается RGBA = RGB32. 
   <code>ConvertToRGB</code> конвертирует в RGB32, если только входной клип не RGB24.
    Если необходим RGB24 по какой-то причине, то необходимо использовать <code>ConvertToRGB24</code>
     и для обратного преобразования <code>ConvertToRGB32</code>.

<p>
Синтакс и работа <code>ConvertToRGB24</code> идентична <code>ConvertToRGB</code>, 
за исключением что выходной формат 24-битный; если исходник RGB32, то альфа-канал будет удален.

<p>С v2.51/v2.52 добавлен опциональный параметр <var>interlaced</var> 
(по умолчанию <var>interlaced</var><i>=</i><code>false</code>).
 Когда он установле в false, подразумевается, что <var>clip</var> прогрессивный, 
 когда он установле в true, подразумевается, что <var>clip</var> чересстрочный. 
 Эта опция добавлена из-за того, что например (предполагая, что clip чересстрочный в формате YV12):
<pre>SeparateFields(clip)
ConvertToYV12
Weave</pre>
обрабатывается некорректно. Вместо этого лучше использовать:
<pre>ConvertToYV12(clip, interlaced=true)</pre>

Необходимо отметить, что установка <var>interlaced</var>=true изменяет что либо, 
только если требуется преобразование YV12 &lt;-&gt; YUY2/RGB, в остальных случаях просто игнорируется.
Больше информации про это можно найти здесь &quot;<a href="../advancedtopics/interlaced_fieldbased.htm">Цветовые преобразования и чересстрочное / основанное на полях видео</a>&quot;.

<p>В отличие от того, что некоторые могут предположить, однозначного преобразования YUV в RGB нет. В AviSynth'е реализованы два наиболее популярных: Rec.601 и
Rec.709 (рекомендации ITU-R, названные по их официальным спецификациям). 
Хотя они не будут правильными во всех случаях, следующее должно быть правильно в большинстве случаев:

<p>Первый вариант (Rec.601) должен быть использован если исходник DivX/XviD или
некоторая запись с аналогового источника: <pre>ConvertToRGB(clip)</pre>

<p>Второй вариант (Rec.709) должен быть использован если исходник DVD или HDTV: <pre>ConvertToRGB(clip, matrix=&quot;rec709&quot;)</pre>

<p>В <em>v2.56</em>, также доступно обратное этому преобразование - <pre>ConvertToYUY2(clip, matrix="rec709") или ConvertToYV12(clip, matrix="rec709")</pre>

<p>В <em>v2.56</em>, <var>matrix</var>=&quot;pc.601&quot; (и  <var>matrix</var>=&quot;pc.709&quot;)
 разрешает производить RGB &lt;-> YUV преобразование сохраняя диапазон сигнала яркости,
  т.е. RGB [0,255] &lt;-> YUV [0,255] вместо обычного/умолчательного RGB [0,255] &lt;-> YUV [16,235]).</p>

<p>
Все фильтры от VirtualDub (загруженные с помощью <code>LoadVirtualdubPlugin</code>, см
<a href="../syntax.htm#Plugins">Plugins</a>) поддерживают только RGB32 на входе.

<p><b>RGB24, RGB32:</b> Цвета хранятся в значениях основных цветов красного, зеленого и синего. 
В RGB32 есть дополнительный Альфа канал для прозрачности. Размер изображения может быть любым.

<p><b>YUY2:</b> Изображение хранится в виде значений яркости Y и двух значений цвета U и V. 
Для двух горизонтальных пикселов есть только одно значение цвета и два значения яркости (два Y, один U, один V). 
Поэтому ширина должна быть кратна двум.

<p><b>YV12:</b> Так же как для YUY2, но только одно значение цвета для 4 пикселов (квадрата 2х2).
 Оба размера изображения должны быть кратны двум, а если видео чересстрочное, 
 то высота должна быть кратна четырем, потому что квадрат 2х2 берется из поля, а не кадра.

<p>Некоторые функции проверяют ограничения на размеры изображения, некоторые округляют параметры, 
хотя все еще могут происходить искажения изображения или ошибки в программе.

<p>Работа с YUY2 быстрее, чем с RGB. YV12 еще быстрее и родное для MPEG формата, 
так что производится меньше преобразований цветовых пространств.

<p>Преобразования цветовых форматов не беспотерьные, так что надо использовать как можно меньше преобразований.
 Если множественные преобразования необходимы, надо использовать <code>ConvertBackToYUY2</code>
  для преобразования в YUY2, если исходник уже один раз был в формате YUY2. 
  Это уменьшает размазывание цвета, но все еще теряется некоторая часть точности. 

<p>В большинстве случаев, фильтр <code>ConvertToRGB</code> не потребуется. 
Если выход AviSynth в YUY2 и приложение ожидает RGB,
 система будет использовать установленный YUY2 кодек для производства преобразования. 
 Однако, если установленного YUY2 кодека нету, или если 
 (как в случае ATI и некоторых других YUY2 кодеков) кодек конвертирует из YUY2 в RGB неправильно,
  можно использовать встроенный фильтр AviSynthа для производства преобразования вместо дополнительных кодеков.

<p><a href="http://www.math.berkeley.edu/~benrg/huffyuv.html" target="_parent">Huffyuv</a>
 будет работать как системный YUY2 кодек, если больше ни одного кодека для этого формата не установлено,
  так что если установлен Huffyuv <i>и удалены все другие YUY2 кодеки</i>, то <code>ConvertToRGB</code>
   никогда не понадобится.

<p><code>ConvertToRGB24</code> и <code>ConvertToRGB32</code> 
 могут быть использованы для форсирования AviSynth к использованию специфического метода хранения RGB данных.
  RGB24 данные обычно намного медленнее для обработки, чем RGB32, так что если исходник в RGB24, то
   можно получить прибавку в скорости преобразованием в RGB32. 
   Нету никаких известных преимуществ использования формата RGB24 за исключением того,
    что TMPGEnc и VFApi требуют RGB24 на входе.
</p>
<pre># При преобразовании между YUV И RGB происходит небольшое искажение.
# Посмотрим, можно ли его увидеть.
control = ConvertToYUY2()
test = ConvertToYUY2(ConvertToRGB(ConvertToYUY2(ConvertToRGB(control))))
test = ConvertToYUY2(ConvertToRGB(test))
return Subtract(test,control)</pre>
<p><kbd>$English Date:  2006/09/27 18:41:25 $ <br>
Русский перевод 10.05.2005 Drakon Rider <a href="http://drakan.ru">drakan.ru</a>
</kbd></p>
<form><input TYPE="Button" VALUE="Назад"
onClick="history.go(-1)"></form>
</body>
</html>