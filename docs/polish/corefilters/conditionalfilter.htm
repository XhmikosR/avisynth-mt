<HTML>
<head>
<meta http-equiv="Content-type" content="text/html; charset=iso-8859-2" />   
<TITLE>nazwa_filtru</TITLE>

<link rel="stylesheet" type="text/css" href="style2.css">

</HEAD>

<h3>[yv12][yuy2]</h3>
<h1>ConditionalFilter</h1>
<h2><b>ConditionalFilter</b>(clip testclip, clip source1, clip source2, string
function, string operator, string value, bool &quot;show&quot;)</h2>

<hr>

<p><i><b>testclip</b></i>: klip s³u¿±cy do przetestowania filtrowania warunkowego
<br>
<br>
<i><b>source1</b></i>: pierwszy klip; jest zwracany gdy wyra¿enie warunkowe jest spe³nione<br>
<br>
<i><b>source2</b></i>: drugi klip; jest zwracany gdy wyra¿enie warunkowe nie jest spe³nione
<br>
<br>
<i><b>function</b></i>: filtr wewnêtrzny (lub predefiniowana funkcja), który bêdzie u¿yta
w wyra¿eniu warunkowym</p>

<p><i><b>operator</b></i>: ten parametr okre¶la relacjê ("=", ">", "&lt;") pomiêdzy argumentami
<i><b>function</b></i> i <b><i>value</i></b>
<br>
<br>
<i><b>value</b></i>: warto¶æ porównywana z wynikiem uzyskanym dla filtru okre¶lonego parametrem
<b><i>function</i></b></p>

<p><i><b>show</b></i>: gdy równy true to wy¶wietlane s± informacje o bie¿±cej warto¶ci zwracanej przez funkcjê u¿yt± w wyra¿eniu
warunkowym</p>

<hr>

<p><b>ConditionalFilter</b> zwraca klip <b><i> source1</i></b> gdy jest spe³niony warunek utworzony poprzez zestawienie
<i>filter+operator+value</i>, w przeciwnym wypadku zwracany jest klip <b><i>source2</i></b>. Je¿eli
<b><i>function</i></b> nie jest zastosowany w sposób bezpo¶redni na klipie to bêdzie on zastosowany na klipie
<b><i>testclip</i></b>. Strumieñ audio jest pobierany z klipu <i><b>source1</b></i>.&nbsp;<br>
Parametr <i><b>function</b></i> mo¿e byæ dowolnym filtrem wewnêtrznym, a tak¿e jednym z filtrów zdefiniowanych w czê¶ci
&quot;<i>Funkcje wewnêtrzne dla filtrów warunkowych</i>&quot; . Parametr <b><i>operator</i></b> mo¿e
przyj±æ warto¶ci: "equals", "graterthan" lub "lessthan" co jest równowa¿ne z u¿yciem operatorów "=", ">" lub "&lt;".</p>

<hr>

<p><b>Przyk³ad:</b>
  <table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
      <td width="412" valign="top" align="left"><p>vid = AviSource("file")<br>
        vid_blur = vid.Blur(1.5)<br>
        ConditionalFilter(vid, vid_blur, vid, "AverageLuma()", "lessthan", "20")</p></td>
            <td width="11" valign="top" align="left">
        <p>#</p>
      <td width="*%%" valign="top" align="left"><p>zwróci klatki z klipu <i> vid_blur</i> gdy ¶rednia warto¶æ luminancji klatki bêdzie mniejsza od 20. W przeciwnym wypadku zostan± zwrócone klatki z klipu
        <i> vid</i>. Dodanie na koñcu argumentu <i> show=true</i> umo¿liwi wy¶wietlenie na ekranie bie¿±cej ¶redniej warto¶ci luminancji</p></td>
    </tr>
  </table>
<hr>

<h3>[yv12] [yuy2]</h3>
<h1>ScriptClip</h1>
<h2><b>ScriptClip</b>(clip, string function[, bool show, bool after_frame])</h2>

<hr>

<p><i><b>function</b></i>: funkcja, która operuje na klipie (musi byæ podana w cudzys³owach)
<br>
<br>
<i><b>show</b></i>: ten parametr umo¿liwia wy¶wietlenie na ekranie tekstu z informacj± o u¿ytej funkcji<br>
<br>
<i><b>after_frame</b></i>: ta opcja zosta³a dodana w wersji 2.55. Opcja ta umo¿liwia okre¶lenie czy skrypt powinien zostaæ zastosowany na klipie przed (ustawienie domy¶lne tzn.
<i>after_frame=false</i>) czy po tym jak klatka zosta³a zwrócona przez funkcjê okre¶lon± parametrem
<b><i>function</i></b></p>

<hr>

<p><b>ScriptClip</b> zwraca klip, który jest zwracany przez funkcjê operuj±c± na ka¿dej z klatek.&nbsp;<br>
Wynikiem dzia³a poni¿szego skryptu bêdzie czasowe wyg³adzenie scen
statycznych i zastosowanie zmiennego rozmycia dla scen dynamicznych. Rozmycie w poni¿szym przyk³adzie jest realizowane w prawid³owy sposób. W tym skrypcie zosta³a dodana tak¿e zmienna
(diff) i dlatego te¿ nale¿a³o umie¶ciæ przej¶cie do nowej linii poprzez dodanie chr(13):<br>
<br>
<i>
function fmin(float f1, float f2) {return (f1&lt;f2) ? f1 : f2}<br>
clip = AviSource(&quot;c:\file.avi&quot;)<br>
ScriptClip(clip, &quot;diff = YDifferenceToNext()&quot;+chr(13)+&quot;diff > / 2.5 ?
Blur(fmin(diff/20,1.5)) : TemporalSoften(2,7,7,3,2)")</i>
</p>

<p>
Klip na wyj¶ciu skryptu MUSI mieæ dok³adnie takie same parametry jak klip wyj¶ciowy (ta sama rozdzielczo¶æ i przestrzeñ kolorów). Zwracany klip mo¿e mieæ inn± d³ugo¶æ - lecz i tak zostanie u¿yta d³ugo¶æ klipu wej¶ciowego.
¦cie¿ka d¼wiêkowa klipu wej¶ciowego nie jest modyfikowana. Dla ró¿nych filtrów ¼ród³owych (MPEG2DEC3 i AviSource) mo¿liwe jest uzyskanie niezgodno¶ci pomiêdzy przestrzeniami kolorów.
Jest to znane udziwnienie.
</p>

<hr>

<p><b>Przyk³ady:</b>
  <table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
      <td width="357" valign="top" align="left"><p>
clip = AviSource(&quot;c:\file.avi&quot;)<br>
        ScriptClip(clip, &quot;Subtitle(String(YDifferenceFromPrevious))&quot;)<br>
        </p></td>
            <td width="11" valign="top" align="left">
        <p>#</p>
      <td width="*%%" valign="top" align="left"><p>zostanie wy¶wietlona (na bie¿±cej klatce) ró¿nica w luminancji pomiêdzy poprzedni± a bie¿±c± klatk±</p></td>
    </tr>
    <tr>
      <td width="357" valign="top" align="left"><p>&nbsp</p></td>
      <td width="11" valign="top" align="left">
        </td>
      <td width="*%%" valign="top" align="left">
        </td>
    </tr>
    <tr>
      <td width="357" valign="top" align="left"><p>
clip = AviSource(&quot;c:\file.avi&quot;)<br>
        ScriptClip(clip, &quot;Blur(YDifferenceFromPrevious/20.0)&quot;)</p></td>
            <td width="11" valign="top" align="left">
        <p>#</p>
      <td width="*%%" valign="top" align="left"><p>rozmycie ka¿dej klatki w zale¿no¶ci od ró¿nicy luminancji pomiêdzy bie¿±c±, a poprzedni± klatk±</p></td>
    </tr>
    <tr>
      <td width="357" valign="top" align="left"><p>&nbsp</p></td>
      <td width="11" valign="top" align="left">
        </td>
      <td width="*%%" valign="top" align="left">
        </td>
    </tr>
<tr>
      <td width="357" valign="top" align="left"><p>ScriptClip(&quot;subtitle(string(current_frame))&quot;)<br>
        </p></td>
            <td width="11" valign="top" align="left">
        <p>#</p>
      <td width="*%%" valign="top" align="left"><p>wy¶wietlenie numeru bie¿±cej klatki w
        klipie<br>
        </p></td>
    </tr>
    <tr>
      <td width="357" valign="top" align="left"><p>&nbsp</p></td>
      <td width="11" valign="top" align="left">
        </td>
      <td width="*%%" valign="top" align="left">
        </td>
    </tr>
<tr>
      <td width="357" valign="top" align="left"><p>
AviSource(&quot;C:\file.avi&quot;).trim(100,124)<br>
        ScriptClip(&quot;&quot;&quot;subtitle(&quot;frame = " +
        string(current_frame))&quot;&quot;&quot;)</p></td>
            <td width="11" valign="top" align="left">
        <p>#</p>
      <td width="*%%" valign="top" align="left"><p>wy¶wietlenie tekstu 'frame = numer_bie¿±cej_klatki':</p></td>
    </tr>

  </table>
<hr>

<h3>[yv12] [yuy2]</h3>
<h1>FrameEvaluate</h1>
<h2><b>FrameEvaluate</b>(clip, string function[, bool after_frame])</h2>

<hr>

<p><i><b>function</b></i>: funkcja, która operuje na klipie ( musi byæ podana w cudzys³owach)
<br>
<br>
<i><b>after_frame</b></i>: ta opcja zosta³a dodana w wersji 2.53. Umo¿liwia okre¶lenie czy skrypt powinien zostaæ zastosowany na klipie przed (ustawienie domy¶lne tzn.
<i> after_frame=false</i>) czy po tym jak klatka zosta³a zwrócona przez funkcjê okre¶lon± parametrem
<b><i>function</i></b></p>

<hr>

<p>Dzia³anie tego filtra jest podobne do sposobu dzia³ania filtru <b> ScriptClip</b> z t± ró¿nic±, ¿e klip zwracany przez ten filtr jest ignorowany.
Mo¿e byæ to przydatne do okre¶lania zmiennych, itp. Klatki z klipu s± dostarczane w sposób bezpo¶redni (bez wykonywania na nich jakichkolwiek dzia³añ).</p>

<hr>

<h3>[yv12] [yuy2]</h3>
<h1>ConditionalReader</h1>
<h2><b>ConditionalReader</b>(clip, string filename, string variablename[, bool show])</h2>

<hr>

<p><i><b>filename</b></i>: nazwa pliku tekstowego (w cudzys³owach) z warto¶ciami, które bêd± przypisane pod zmienn± okre¶lon± parametrem
<b><i>variablename</i></b>
<br>
<br>
<i><b>variablename</b></i>: zmienna, do której zostan± przypisane warto¶ci znajduj±ce siê w pliku
<b><i>filename<br>
<br>
show</i></b>: gdy ten parametr jest równy true to warto¶æ przypisana dla tej klatki zostanie na³o¿ona na
klip; domy¶lnie <i>show=false</i></p>

<hr>

<p><b>ConditionalReader</b> umo¿liwia pobranie warto¶ci dla ka¿dej z klatek lub dla przedzia³u klatek z pliku tekstowego.<br>

<hr>
<h1>Wstêp do zaawansowanego filtrowania warunkowego</h1> 
<p><b><u>Format pliku<br>
</u></b>
Plik zawiera sam tekst. Rozdzielenia warto¶ci dokonuje siê za pomoc± odstêpów. Ka¿da nowa linia oznacza oddzielny zbiór danych. Wielko¶æ liter w tek¶cie nie jest brana pod uwagê.<br>
<br>
<i><b>TYPE (int|float|bool)<br>
</b></i>
<br>
W pojedynczym pliku dane mog± byæ tylko jednego typu. Obecnie mo¿na u¿ywaæ danych typu float (warto¶ci
zmiennopozycyjne), int (warto¶ci ca³kowite) oraz bool (warto¶ci logiczne). Typ danych okre¶lany jest poprzez s³owo kluczowe
<b><i>TYPE</i></b>. Tworz±c plik z danymi zawsze trzeba najpierw okre¶liæ ich typ, poniewa¿ dane, które by³y umieszczone przed s³owem
<b><i>TYPE</i></b> NIE ZOSTAN¡ przypisane pod zmienn± <i><b>variable</b></i>. Wyklucza siê zmianê typu danych gdy ju¿ raz zosta³ on okre¶lony (przyp. pocz±tek akapitu).<br>
<br>
<b><i>DEFAULT &lt;warto¶æ><br>
</i></b>
<br>
To s³owo kluczowe okre¶la warto¶æ domy¶ln± dla wszystkich klatek. S³owo
to nale¿y umie¶ciæ tu¿ po <i><b>TYPE</b></i>, poniewa¿ ustawienie warto¶ci domy¶lnej powoduje utratê wcze¶niej przypisanych warto¶ci dla
klatek. S³owo to mo¿na pomin±æ o ile ma siê pewno¶æ, ¿e wszystkim klatkom zosta³y przypisane warto¶ci. W przeciwnym wypadku mo¿e to doprowadziæ do uzyskania niezamierzonego rezultatu.<br>
<br>
<b><i>&lt;numer_klatki> &lt;warto¶æ&gt;</i></b><br>
<br>
Umo¿liwi to przypisanie warto¶ci pojedynczej klatce o numerze <b><i>numer_klatki</i></b>.<br>
<br>
<b><i>R &lt;klatka_pocz±tkowa> &lt;klatka_koñcowa> &lt;warto¶æ&gt;</i></b><br>
<br>
Komenda ta przypisze warto¶æ dla przedzia³u klatek. Klatki o numerach <b><i>klatka_pocz±tkowa</i></b> i
<b><i>klatka_koñcowa</i></b> zalicza siê tak¿e do tego przedzia³u.<br>
<br>
<b><i>I &lt;klatka_pocz±tkowa> &lt;klatka_koñcowa> &lt;warto¶æ_pocz±tkowa> &lt;warto¶æ_koñcowa&gt;</i></b><br>
<br>
Ten zapis spowoduje przypisanie przedzia³owi klatek warto¶ci zmieniaj±cej siê w sposób liniowy od
<b><i>warto¶æ_pocz±tkowa</i></b> do <b><i>warto¶æ_koñcowa</i></b>. Dla tej komendy nie mo¿na stosowaæ warto¶ci logicznych, poniewa¿ nie mo¿na ich zmieniaæ w sposób liniowy. Klatki o numerach
<b><i>klatka_pocz±tkowa</i></b> i <b><i>klatka_koñcowa</i></b> tak¿e s± zaliczane do przedzia³u.<br>
<br>
<u><b>Typy warto¶ci<br>
</b></u>Tak jak wspomniano wcze¶niej mo¿na stosowaæ typy <i>int</i>, <i>float</i> i
<i>bool</i>.&nbsp;<br>
Warto¶ci typu <i>int</i> mog± byæ ujemne. Typ <i>float</i> jest liczb± dziesiêtn± zawieraj±c± kropkê. Podobnie jak
<i>int</i> mo¿e te¿ byæ liczb± ujemn± oraz zawieraæ literê e lub E (symbol wyk³adnika potêgi dziesiêtnej) i po nim liczbê ca³kowit± np. -32.52521E2 = -3252.521, -32.52521e-2 = -0.3252521.
Typ <i>bool</i> mo¿e mieæ dwie warto¶ci tj. true (prawda) lub false (fa³sz).<br>
<br>
<b><u>Przyk³ady</u></b><br>
<br>
<b><i>Zastosowanie podstawowe</i></b><br>
<br>
<b><i>
file.txt:<br>
</i></b><i>
Type float<br>
Default 3.45567<br>
<br>
R 45 300 76.5654<br>
2 -671.454<br>
72 -671.454<br>
</i>
<br>
Powy¿szy plik zwróci warto¶ci zmiennopozycyjne. Domy¶ln± warto¶ci± dla klatek bêdzie 3.45567. Jednak¿e klatkom z przedzia³u od 45 do 300 zostanie przypisana warto¶æ 76.5654, a klatkom 2 i 72 warto¶æ -671.454.<br>
<br>
Jak mo¿na zauwa¿yæ pó¼niejsze zmiany uniewa¿niaj± wcze¶niejsze przypisane warto¶ci. Ta zasada jest dobrze widoczna dla klatki o numerze 72. Pomimo tego, ¿e by³a ona zawarta w przedziale 45-300 i jej warto¶æ wynosi³a 76.5654, to w ostatniej linijce zosta³a przypisana jej nowa warto¶æ równa -671.454. Z drugiej strony gdyby okre¶lenie przedzia³u klatek nast±pi³o po linii "72 -671.454", to klatce 72 zosta³aby przyporz±dkowana warto¶æ 76.5654.<br>
<br>
Poni¿ej jest umieszczony skrypt, który wykorzystuje wcze¶niej stworzony plik z danymi:<br>
<br>
<i>
colorbars(512,512)<br>
trim(0,500)<br>
ScriptClip("subtitle(string(myvar))")<br>
ConditionalReader("file.txt", "myvar", false)<br>
</i>
<br>
Wywo³anie tego skryptu spowoduje przypisanie danych zawartych w pliku <i> "file.txt&quot;
</i>zmiennej o nazwie <i> "myvar"</i>, która bêdzie wykorzystana przez filtr <b> Subtitle</b> wywo³any przez
<b> ScriptClip</b> w celu wy¶wietlenia zmiennej <i> "myvar&quot;</i>.<br>
<br>
<b><i>Zmiana parametrów nak³adania klipów</i><u><br>
</u></b><b><i><br>
skrypt Avisynth:<br>
</i></b><i>
colorbars(512,256)<br>
a1 = trim(0,600)<br>
a2 = MessageClip("Text clip")<br>
overlay(a1,a2, y = 100, x = 110, mode="subtract", opacity=0, pc_range=true)<br>
ConditionalReader("opacity.txt", "ol_opacity_offset", false)<br>
ConditionalReader("xoffset.txt", "ol_x_offset", false)<br>
</i>
<br>
<b><i>xoffset.txt:<br>
</i></b><i>
Type int<br>
Default -50<br>
I 25 50 -50 100<br>
R 50 250 100<br>
I 250 275 100 250<br>
</i>
<br>
<b><i>opacity.txt:</i></b><br>
<i>
Type float<br>
Default 0.0<br>
I 25 50 0.0 1.0<br>
R 50 250 1.0<br>
I 250 275 1.0 0.0<br>
</i>
<br>
W dwóch plikach tekstowych zosta³y ustalone warto¶ci odpowiednio dla parametru
<i>x</i> (plik "<i>xoffset.txt</i>") i <i>opacity</i> (plik "<i>opacity.txt</i>"). Dla klatek 25->50 parametr
<i>opacity</i> zmienia siê od 0.0 do 1.0, podczas gdy tekst przemieszcza siê z lewej na praw± stronê. Tekst jest nieruchomy dla przedzia³u 50->250. Dla klatek z przedzia³u 250->275 nastêpuje dalsze przemieszczanie siê tekstu na prawo z jednoczesnym zanikaniem.</p>

<p><b><u>Funkcje wewnêtrzne dla filtrów warunkowych</u></b><br>
Poni¿ej s± umieszczone wewnêtrzne funkcje, których warto¶æ jest obliczana dla ka¿dej klatki.
Funkcje te zwróc± ¶redni± warto¶æ piksela dla p³aszczyzny (wymagana przestrzeñ to YV12 oraz procesor zawieraj±cy zestaw instrukcji ISSE):<br>
<br>
<i>
AverageLuma(clip)<br>
AverageChromaU(clip)<br>
AverageChromaV(clip)<br>
</i>
<br>
Poni¿sze funkcje zwróc± warto¶æ u³amkow± z przedzia³u [0, 255] bezwzglêdnej ró¿nicy pomiêdzy dwiema p³aszczyznami (wymagana przestrzeñ to YV12 oraz procesor zawieraj±cy zestaw instrukcji ISSE):<br>
<br>
<i>
RGBDifference(clip1, clip2)<br>
LumaDifference(clip1, clip2)<br>
ChromaUDifference(clip1, clip2)<br>
ChromaVDifference(clip1, clip2)<br>
</i>
<br>
W powy¿szych funkcjach mo¿liwie jet pominiêcie pierwszego parametru. Gdy zostaje on pominiêty to wtedy parametr
<i>clip</i> jest zast±piony klipem testowym.<br>
<br>
Poni¿sze funkcje powinny byæ przydatne do wykrywania zmiany ujêcia:<br>
<br>
<i>
RGBDifferenceFromPrevious(clip)<br>
YDifferenceFromPrevious(clip)<br>
UDifferenceFromPrevious(clip)<br>
VDifferenceFromPrevious(clip)<br>
RGBDifferenceToNext(clip)<br>
YDifferenceToNext(clip)<br>
UDifferenceToNext(clip)<br>
VDifferenceToNext(clip)<br>
</i>
<br>
W poni¿szym przyk³adzie ostatnia klatka przed zmian± ujêcia zostanie zast±piona pierwsz± klatk± po zmianie ujêcia:<br>
<br>
<i>
ConditionalFilter(last, last, last.trim(1,0), "YDifferenceToNext()", ">", "10", true)<br>
</i>
<br>
Pozosta³e funkcje wewnêtrzne to:<br>
<br>
<i>
YPlaneMax(clip, float threshold)<br>
UPlaneMax(clip, float threshold)<br>
VPlaneMax(clip, float threshold)<br>
YPlaneMin(clip, float threshold)<br>
UPlaneMin(clip, float threshold)<br>
VPlaneMin(clip, float threshold)<br>
YPlaneMedian(clip)<br>
UPlaneMedian(clip)<br>
VPlaneMedian(clip)<br>
YPlaneMinMaxDifference(clip, float threshold)<br>
UPlaneMinMaxDifference(clip, float threshold)<br>
VPlaneMinMaxDifference(clip, float threshold)<br>
</i><br>
Parametr <i>threshold</i> (próg) stanowi procent liczby pikseli, które s± dopuszczane powy¿ej lub poni¿ej warto¶ci minimalnej. Parametr ten jest nieobowi±zkowy i domy¶lnie równy 0.<br>
<br>
Je¿eli rozumiesz dzia³anie powy¿szych filtrów to mo¿esz przyst±piæ do zapoznania siê z
&quot;<i>zaawansowanym filtrowaniem warunkowym</i>&quot;, które umo¿liwi bli¿sze zapoznanie siê z filtrowaniem warunkowym.<br>
<hr>
<h1>Zaawansowane filtrowanie warunkowe: czê¶æ pierwsza</h1>
<p>¯eby zrozumieæ t± czê¶æ musisz znaæ podstawy funkcjonowania Avisynth:
skrypty s± wykonywane w kolejno¶ci od góry do do³u, lecz gdy istnieje ¿±dana klatka to tak naprawdê ostatni filtr jest wywo³ywany jako pierwszy, i ¿±da on klatek od filtrów znajduj±cych siê powy¿ej. Dla przyk³adu:<br>
<br>
<i>
AviSource("myfile.avi")<br>
ColorYUV(analyze=true)<br>
Histogram()<br>
</i>
<br>
Gdy otworzysz ten skrypt w programie VirtualDub to kolejno:<br>
- gdy VirtualDub ¿±da dan± klatkê to AviSynth ¿±da t± klatkê od filtru <b>Histogram</b><br>
- <b>Histogram</b> ¿±da klatkê od <b> ColorYUV</b><br>
- a <b> ColorYUV</b> z kolei od <b> AviSource</b>; <b> AviSource</b>, który wybiera klatkê z pliku "myfile.avi"
dostarcza j± filtrowi <b> ColorYUV</b><br>
- <b>ColorYUV</b> filtruje obraz i wysy³a go do filtru <b>Histogram</b>, który po wykonaniu filtrowania zwraca go do programu VirtualDub<br>
<br>
Tak wiêc w rzeczywisto¶ci ci±g filtrów dzia³a w odwrotnej kolejno¶ci. Daje
to filtrowi mo¿liwo¶æ ¿±dania kilku klatek z ¼ród³a znajduj±cego siê nad nim.<br>
Jednak¿e filtry warunkowe musz± zwróciæ klip zanim poprosz± o klatki z filtrów znajduj±cych siê nad nimi, poniewa¿ musz± wiedzieæ, który filtr maj± wywo³aæ (w zale¿no¶ci od wyniku porównania funkcji z warto¶ci± /patrz
<b> ConditionalFilter</b>/). Nastêpna wa¿n± rzecz± jest to, ¿e tylko zmienne zdefiniowane w globalny sposób w "¶rodowisku" filtru warunkowego mog± byæ u¿yte te¿ poza nim (i na odwrót tzn. zmienne globalne zdefiniowane poza filtrem warunkowym mog± byæ u¿yte w "¶rodowisku" filtru). Spójrz na poni¿szy
skrypt:<br>
<br>
<i>
v = AviSource("E:\Temp\Test3\atomic_kitten.avi").ConvertToYV12<br>
function g(clip c)<br>
{<br>
  global w = c<br>
  c2 = ScriptClip(c, "subtitle(t)")<br>
  c3 = FrameEvaluate(c2, "t = String(text)")<br>
  c4 = FrameEvaluate(c3, "text = YDifferenceFromPrevious(w)")<br>
  return c4<br>
}<br>
<br>
g(v)<br>
</i>
<br>
Ci±g filtrów pracuje w nastêpuj±cy sposób:<br>
- gdy VirtualDub potrzebuje klatki to AviSynth ¿±da klatkê od funkcji <i>g()</i><br>
- funkcja <i> g()</i> ¿±da klatkê od filtru <b> AviSource</b><br>
- AviSynth ¿±da klatkê od drugiego filtru <b> FrameEvaluate</b><br>
- drugi filtr <b> FrameEvaluate</b> oblicza warto¶æ wyra¿enia <i> YDifferenceFromPrevious(w)</i> i przypisuje j± do zmiennej
<i>text</i> (po uprzednim pobraniu&nbsp;<br>
                             klatki poprzez <b> AviSource</b>).<br>
- po tym ta klatka jest ¿±dana przez pierwszy filtr <b> FrameEvaluate</b><br>
- Pierwszy filtr <b> FrameEvaluate</b> potrzebuje tej klatki od <b> ScriptClip</b>, który to wylicza wyra¿enie
<i> String(text)</i> i przypisuje wynik pod zmienn± <i>t</i><br>
- <b>ScriptClip</b> ¿±da klatkê od <b> ConvertToYV12</b> i przeprowadza na tej klatce operacjê
<i> Subtitle(t)</i><br>
- <b>ConvertToYV12</b> potrzebuje klatki od filtru ¼ród³owego <b> AviSource</b><br>
- <b>AviSource</b> pobiera klatkê z pliku "atomic_kitten.avi" i dostarcza j± do funkcji
<i>g()</i>, która zwraca t± klatkê do programu VirtualDub<br>
<br>
Jak mo¿na zauwa¿yæ <i>w</i> jest zdefiniowana jako zmienna globalna. Dziêki temu mo¿na bêdzie j± u¿yæ w dalszej czê¶ci skryptu w ¶rodowisku filtru warunkowego. Je¿eli chcemy u¿yæ zmiennych
<i>t</i> i <i>text</i> w innej funkcji ni¿ <i> g()</i> (wewn±trz lub na zewn±trz ¶rodowiska filtru warunkowego), to te zmienne
powinny byæ tak¿e zdefiniowane jako zmienne globalne. I tak na przyk³ad:<br>
<br>
<i>
v = AviSource("E:\Temp\Test3\atomic_kitten.avi").ConvertToYV12<br>
<br>
function g(clip c)<br>
{<br>
  global w = c<br>
  c2 = ScriptClip(c, "subtitle(t)")<br>
  c3 = FrameEvaluate(c2, "me()")<br>
  c4 = FrameEvaluate(c3, "global text = YDifferenceFromPrevious(w)")<br>
  return c4<br>
}<br>
<br>
function me()<br>
{<br>
  global t = String(text)<br>
}<br>
<br>
g(v)<br>
</i>
<br>
Znaczna czê¶æ powy¿szego skryptu jest zbyteczna i mo¿e zostaæ usuniêta. Poni¿szy skrypt daje dok³adnie taki sam
rezultat:<br>
<br>
<i>
v = AviSource("c:\clip.avi")<br>
ScriptClip(v, &quot;Subtitle(String(YDifferenceFromPrevious))&quot;)
</i>
<h1>Zaawansowane filtrowanie warunkowe: czê¶æ druga</h1>
<p>
W poni¿szym przyk³adzie do pliku tekstowego zostan± zapisane niektóre informacje, które zale¿± od wy¶wietlanej klatki. Pierwsza zmienna
&quot;<i>a</i>&quot; wskazuje czy klatka jest z³o¿ona (<i>ang. combed</i>) (dla pewnych warto¶ci progowych). Nale¿y zwróciæ uwagê, ¿e filtr
<b> IsCombed</b> wchodzi w sk³ad pakietu <b> DeComb</b>. Druga zmienna &quot;<i>b</i>&quot; okre¶la "poziom" ruchu w klatce.<br>
<br>
<i>
global sep="."<br>
global combedthreshold=25<br>
<br>
function IsMoving()<br>
{<br>
global b = (diff &lt; 1.0) ? false : true<br>
}<br>
<br>
function CombingInfo(clip c)<br>
{<br>
file = "F:\interlace.log"<br>
global clip = c<br>
<br>
c = WriteFile(c, file, "a", "sep", "b")<br>
c = FrameEvaluate(c, "global a = IsCombed(clip,combedthreshold)")<br>
c = FrameEvaluate(c, "IsMoving")<br>
c = FrameEvaluate(c,"global diff = 0.50*YDifferenceFromPrevious(clip) + 0.25*UDifferenceFromPrevious(clip) + 0.25*VDifferenceFromPrevious(clip)")<br>
<br>
return c<br>
}<br>
<br>
v = mpeg2source("F:\From_hell\from_hell.d2v").trim(100,124)<br>
CombingInfo(v)
</i>
<h1>Zaawansowane filtrowanie warunkowe: czê¶æ trzecia</h1>
<p>
Na forum <b><i> doom9</i></b> pojawi³y siê filtry, które dobieraj± algorytmy do zmiany rozdzielczo¶ci w zale¿no¶ci od poziomu ruchu w klipie. Te filtry rozró¿niaj± trzy natê¿enia ruchu tj. poziom niski, ¶redni i wysoki (ocena jest dokonywana na podstawie zmian w klatkach). Chodzi oto, ¿eby jeden algorytm u¿y³ wyg³adzania czasowego w scenach o ma³ej ilo¶ci ruchu, inny zastosowa³ wyg³adzanie przestrzenne gdy ilo¶æ ruchu jest du¿a, a jeszcze inny algorytm u¿y³ wyg³adzania przestrzenno-czasowego w ujêciach o ¶rednim poziomie ruchu.<br>
<br>
Poni¿ej zamieszczona jest uproszczona wersja filtru o nazwie <b>  QUANTIFIED MOTION FILTER v1.5 b1 (10/07/2003)</b> napisana przez HomiE FR:<br>
<br>
<i><b>
# QUANTIFIED MOTION FILTER v1.3</b><br>
<b>
# ZA£ADOWANIE WTYCZEK AVISYNTH</b><br>
LoadPlugin("C:\PROGRA~1\GORDIA~1\mpeg2dec3.dll")<br>
LoadPlugin("C:\PROGRA~1\GORDIA~1\TemporalCleaner.dll")<br>
LoadPlugin("C:\PROGRA~1\GORDIA~1\FluxSmooth.dll")<br>
LoadPlugin("C:\PROGRA~1\GORDIA~1\UnFilter.dll")<br>
<br>
<b>
# ZA£ADOWANIE SKRYPTU "QUANTIFIED MOTION FILTER"<br>
</b>
Import("E:\temp\QMF\qmf.avs")<br>
<br>
<b>
# FILTR DO ZMIANY ROZDZIELCZO¦CI DLA UJÊÆ O MA£EJ ILO¦CI RUCHÓW<br>
# -> ZMIANA ROZDZIELCZO¦CI Z MAKSYMALNYM ZACHOWANIEM OSTRO¦CI + WYG£ADZANIE CZASOWE<br>
</b>
function Low_Motion_Filter(clip c)<br>
{<br>
  c = TemporalCleaner(c, 5, 10)<br>
  c = LanczosResize(c, 512, 272)<br>
  return c<br>
}<br>
<br>
<b>
# FILTR DO ZMIANY ROZDZIELCZO¦CI DLA UJÊÆ O ¦REDNIEJ ILO¦CI RUCHÓW<br>
# -> ZMIANA ROZDZIELCZO¦CI ZE ¦REDNIM ZACHOWANIEM OSTRO¦CI + WYG£ADZANIE CZASOWO-PRZESTRZENNE<br>
</b>
function Medium_Motion_Filter(clip c)<br>
{<br>
  c = FluxSmooth(c, 7, 7)<br>
  c = BicubicResize(c, 512, 272, 0.00, 0.50)<br>
  return c<br>
}<br>
<br>
<b>
# FILTR DO ZMIANY ROZDZIELCZO¦CI DLA UJÊÆ O DU¯EJ ILO¦CI RUCHÓW<br>
# -> ZMIANA ROZDZIELCZO¦CI Z MA£YM ZACHOWANIEM OSTRO¦CI + WYG£ADZANIE PRZESTRZENNE<br>
</b>
function High_Motion_Filter(clip c)<br>
{<br>
  c = FluxSmooth(c, -1, 14)<br>
  c = UnFilter(c, -30, -30)<br>
  c = BilinearResize(c, 512, 272)<br>
  return c<br>
}<br>
<br>
<b>
# WCZYTANIE KLIPU ¬RÓD£OWEGO</b><br>
AviSource("E:\temp\QMF\britney-I_love_rock_'n_roll.avi")<br>
ConvertToYV12(interlaced=true)<br>
Telecide(0)<br>
<br>
<b>
# U¯YCIE FILTRU STOSUJ¡CEGO ALGORYTM ZMIANY ROZDZIELCZO¦CI W ZALE¯NO¦CI OD ILO¦CI RUCHU (U¯YCIE QMF)<br>
</b>
QMF()<br>
<br>
</i>
Poni¿szy skrypt nale¿y umie¶ciæ w oddzielnym pliku o nazwie "qmf.avs":<br>
<i>
<br>
<b>
# QUANTIFIED MOTION FILTER (17/08/2003) napisany przez	 HomiE FR (homie.fr@wanadoo.fr)<br>
# FUNKCJA SZACUJ¡CA POZIOM RUCHU<br>
</b>
function ME()<br>
{<br>
<b>
  # USTALANIE WARTO¦CI PARAMETRU 'motion_level' W ZALE¯NO¦CI OD ¦REDNIEJ RÓ¯NICY [1]<br>
</b>
  global motion_level = (diff &lt; threshold_lm) ? 0 : motion_level<br>
  global motion_level = (diff >= threshold_lm &amp;&amp; diff &lt;= threshold_hm) ? 1 : motion_level<br>
  global motion_level = (diff > threshold_hm) ? 2 : motion_level<br>
}<br>
<br>
<b>
# FUNKCJA QUANTIFIED MOTION FILTER (pol. filtr s³u¿±cy do przyporz±dkowania ilo¶ci ruchu do trzech kategorii /w tym konkretnym wypadku/)<br>
</b>
function QMF(clip c, float "threshold_lm", float "threshold_hm", bool "debug")<br>
{<br>
<b>
  # USTAWIENIE PROGÓW DLA POSZCZEGÓLNYCH KATEGORII ILO¦CI RUCHU [2]</b><br>
  threshold_lm = default(threshold_lm, 4.0)<br>
  threshold_hm = default(threshold_hm, 12.0)<br>
  global threshold_lm = threshold_lm<br>
  global threshold_hm = threshold_hm<br>
<br>
<b>
  # W£¡CZENIE/WY£¡CZENIE INFORMACJI S£U¯¡CEJ DO MONITOROWANIA DZIA£ANIA FILTRU [3]<br>
</b>
  debug = default(debug, false)<br>
<br>
<b>
  # ZAINICJOWANIE ZMIENNEJ 'motion_level'<br>
</b>
  global motion_level = 0<br>
<br>
<b>
  # OKRE¦LENIE BIE¯¡CEGO KLIPU [4]<br>
</b>
  global clip = c<br>
<br>
<b>
  # POBRANIE ROZDZIELCZO¦CI WYJ¦CIOWEJ [5]<br>
</b>
  width = Width(Low_Motion_Filter(c))<br>
  height = Height(Low_Motion_Filter(c))<br>
  global c_resized = PointResize(c, width, height)<br>
<br>
<b>
  # ZASTOSOWANIE ODPOWIEDNIEGO FILTRU W ZALE¯NO¦CI OD ILO¦CI RUCHU [6]<br>
</b>
  c = ConditionalFilter(c, Low_Motion_Filter(c), c_resized, "motion_level", "=", "0")
<b>  # [6a]</b><br>
  c = ConditionalFilter(c, Medium_Motion_Filter(c), c, "motion_level", "=", "1")
<b>       # [6b]</b><br>
  c = ConditionalFilter(c, High_Motion_Filter(c), c, "motion_level", "=", "2") <b>         # [6c]</b><br>
<br>
<b>
  # WY¦WIETLENIE INFORMACJI O DZIA£ANIU FILTRU [7]<br>
</b>
  c = (debug == true) ? ScriptClip(c, "Debug()") : c<br>
<br>
<b>
  # OTRZYMANIE POZIOMU RUCHU Z FUNKCJI SZACUJ¡CEJ TEN POZIOM [8]<br>
</b>
  c = FrameEvaluate(c, "ME()")<br>
<br>
<b>
  # OTRZYMANIE RÓ¯NICY POMIÊDZY POPRZEDNI¡, A AKTUALN¡ KLATK¡ [9]<br>
</b>
  c = FrameEvaluate(c, "global diff = 0.50*YDifferenceFromPrevious(clip) + 0.25*UDifferenceFromPrevious(clip) + 0.25*VDifferenceFromPrevious(clip)")<br>
  return c<br>
}<br>
<br>
<b>
# FUNKCJA WY¦WIETLAJ¡CA INFORMACJE O DZIA£ANIU FILTRU<br>
</b>
function Debug(clip c)<br>
{<br>
<b>
  # WY¦WIETLENIE INFORMACJI O WERSJI FILTRU [10]<br>
</b>
  c = Subtitle(c, "Quantified Motion Filter", x=20, y=30, font="lucida console", size=18, text_color=$FFFFFF)<br>
  c = Subtitle(c, "by HomiE FR (homie.fr@wanadoo.fr)", x=20, y=45, font="lucida console", size=14, text_color=$FFFFFF)<br>
<br>
<b>
  # WY¦WEITLENIE INFORMACJI O OSZACOWANYM POZIOMIE RUCHU [11]<br>
</b>
  c = Subtitle(c, "motion estimation", x=20, y=85, font="lucida console", size=18, text_color=$FFFFFF)<br>
  c = Subtitle(c, "diff = "+string(diff), x=20,y=110, font="lucida console", size=16, text_color=$FFCCCC)<br>
<br>
<b>
  # WY¦WIETLENIE KATEGORII, DO KTÓREJ ZOSTA£ PRZYPISANY POZIOM RUCHU [12]<br>
</b>
  c = Subtitle(c, "quantified motion filter", x=20, y=135, font="lucida console", size=18, text_color=$FFFFFF)<br>
  c = (motion_level == 0) ? Subtitle(c, "scene type = low motion", x=20, y=160, font="lucida console", size=16, text_color=$66FF66) : c<br>
  c = (motion_level == 1) ? Subtitle(c, "scene type = medium motion", x=20, y=160, font="lucida console", size=16, text_color=$66FF66) : c<br>
  c = (motion_level == 2) ? Subtitle(c, "scene type = high motion", x=20, y=160, font="lucida console", size=16, text_color=$66FF66) : c<br>
  return c<br>
}<br>
</i>
<br>
Ci±g filtrów pracuje w nastêpuj±cy sposób:<br>
- gdy VirtualDub potrzebuje klatkê, AviSynth ¿±da jej od funkcji filtru <b> QMF</b><br>
- <b>QMF</b> ¿±da klatki od <b> FrameEvaluate <i>[9]</i></b>.<br>
- nastêpnie skrypt <b><i> [9]</i></b> jest wykonywany i po dostarczeniu klatki przez
<b> AviSource</b> zmiennej globalnej <i>diff</i> przypisywana jest warto¶æ; <b>
	         FrameEvaluate</b> <b><i> [9]</i></b> ¿±da klatki od <b> FrameEvaluate
<i>[8]</i></b><br>
- ponownie jest wyliczana warto¶æ skryptu <b><i>[8]</i></b><br>
- po obliczeniu funkcji <i>me()</i>, zmiennej globalnej <i>motion level</i>  przypisana jest warto¶æ dla tej klatki
<b><i> [1]</i></b><br>
- je¿eli parametr <i> debug=true</i> to klatka jest ¿±dana przez <b> ScriptClip</b> i w ten sposób przez
<i> Debug()</i><br>
- nastêpnie (i gdy <i> debug=false</i>) klatka jest ¿±dana przez ostatni warunkowy filtr
<b> ConditionalFilter <i>[6c]</i></b>, który ¿±da klatki od <i><b>[6b]</b></i>,
natomiast <b><i> [6b]</i></b> ¿±da klatki od <b><i>[6a]</i></b><br>
- nale¿y pamiêtaæ o tym,  ¿e klatka z filtrów <b> High_Motion_filter</b>, <b> Medium_Motion_filter</b>, lub
<b> Low_Motion_filter</b> jest ¿±dana w zale¿no¶ci od<br>
                                 warto¶ci zmiennej <i>motion_level</i><br>
- <b>QMF</b> ¿±da klatki od <b> Telecide</b>, <b> Telecide</b> od <b> ConvertToYV12</b> i na koniec
<b> ConvertToYV12</b> ¿±da klatki od <b> AviSource</b><br>
- <b>AviSource</b> pobiera klatkê z pliku "britney-I_love_rock_'n_roll.avi" i dostarcza j± do
<b>ConvertYV12</b>, itd.<br>
<br>
Kilka szczegó³ów zosta³o pominiêtych po drodze, lecz dziêki temu sposób dzia³ania tego skryptu zosta³ "z grubsza" wyja¶niony.</p><hr>
<h3>translated by Dj_AnT</h3>
</HTML>