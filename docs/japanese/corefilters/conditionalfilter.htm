<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta name="Author" content="Wilbert Dijkhof">
   <title>ConditionalFilter フィルタ</title>
   <link rel="stylesheet" type="text/css" href="../../avisynth.css">
   <link rel="stylesheet" type="text/css" href="../ja.css">
</head>
<body>
<h2>
<a NAME="ConditionalFilter"></a>ConditionalFilter
</h2>
<p><code>ConditionalFilter </code>(<var>clip testclip, clip source1, clip source2,
string filter, string operator, string value, bool &quot;show&quot;</var>)
<p><code>ConditionalFilter</code> は、「<var>filter</var> + <var>operator</var> + <var>value</var>」によって構成される条件が満たされる時には <var>source1</var> を返し、さもなければ <var>source2</var> を返します。<var>filter</var> が明示的にいずれかのクリップに適用されていない場合、そのフィルタは <var>testclip</var> に適用されます。音声は、<var>source1</var> から取られます。</p>

<p>使用例です。このスクリプトは、フレームの輝度の平均値が 20 より低い時に vid_blur のフレームを選択します。さもなければ、vid のフレームが返されます。</p>

<pre>vid = AviSource(&quot;file&quot;)
vid_blur = vid.Blur(1.5)
ConditionalFilter(vid, vid_blur, vid, &quot;AverageLuma()&quot;, &quot;lessthan&quot;, &quot;20&quot;)</pre>

<p><var>show</var>=true を追加指定すると、画面上に現在の値が表示されます。</p>

<p><var>filter</var> 文字列には、任意の内蔵フィルタのほか、いくつかの定義済みフィルタ（<a href="#RuntimeFunctions">ランタイム関数</a>）も指定可能です。<br />
<var>operator</var> 文字列は、&quot;equals&quot;<a href="#footnote_1" class="footnote_link">*1</a>、&quot;greaterthan&quot;<a href="#footnote_2" class="footnote_link">*2</a>、&quot;lessthan&quot;<a href="#footnote_3" class="footnote_link">*3</a> のいずれかを指定可能です。それぞれ &quot;=&quot;、&quot;&gt;&quot;、 &quot;&lt;&quot; と記述しても同じです。</p>

<h2><a NAME="ScriptClip"></a>ScriptClip
</h2>
<p><code>ScriptClip </code>(<var>clip, string function, bool &quot;show&quot;, bool
&quot;after_frame&quot;</var>)
<p><code>ScriptClip</code> は、フレームごとに評価される <var>function</var> によって返されるクリップを返します。<var>function</var> 文字列には、任意の内蔵フィルタのほか、いくつかの定義済みフィルタ（<a href="#RuntimeFunctions">ランタイム関数</a>）も指定可能です。<var>show</var>=true を追加指定すると、画面上に現在の値が表示されます。</p>

<p>いくつかの使用例:</p>

<pre># 現在のフレーム上に前のフレームとの輝度の差を表示する:
clip = AviSource(&quot;c:\file.avi&quot;)
ScriptClip(clip, &quot;Subtitle(String(YDifferenceFromPrevious))&quot;)

# 前のフレームとの輝度の差に基づいて、各フレームにぼかし（Blur）を適用する。
# いくつかのフレームでは、エラーがどのように報告されるかについても表示する :)
clip = AviSource(&quot;c:\file.avi&quot;)
ScriptClip(clip, &quot;Blur(YDifferenceFromPrevious/20.0)&quot;)

# ほとんど動きのないシーンには TemporalSoften を適用し、動きのあるシーンには「可変」ぼかしを適用する。
# 今回は Blur にちゃんと上限が設定され、変数も割り当てられている。改行（chr(13)）が挿入されているのはこのため:
function fmin(float f1, float f2) {
&nbsp; return (f1&lt;f2) ? f1 : f2
}
clip = AviSource(&quot;c:\file.avi&quot;)
ScriptClip(clip, &quot;diff = YDifferenceToNext()&quot;+chr(13)+&quot;diff &gt; 2.5 ? Blur(fmin(diff/20,1.5)) : TemporalSoften(2,7,7,3,2)&quot;)

# クリップ内にフレーム番号を表示する:
ScriptClip(&quot;subtitle(string(current_frame))&quot;)

# クリップ内に「frame = フレーム番号」を表示する:
ScriptClip(&quot;&quot;&quot;subtitle(&quot;frame = &quot; + string(current_frame))&quot;&quot;&quot;)</pre>

<p>v2.55 から、<i><var>after_frame</var></i> オプション（true または false）が追加されています。これは、スクリプトの評価が、上述のフィルタからフレームが取得される前（デフォルトの動作）に行われるか、後に行われるかを決定します。</p>

<p>「制限」: スクリプトの出力は、<code>ScriptClip</code> に渡されるクリップと完全に同じである<b>必要があります</b>（同じ色空間、同じ幅、同じ高さ）。返却されるクリップは異なる長さを持つことが許可されていますが、つねに「clip」の長さが使用されます。「clip」の音声は、そのまま素通しされます。2 つの非常に異なるソース（MPEG2DEC3 と AviSource）に関しては、色空間の不一致に陥るかもしれません。これは、有名な逃げ口上です。</p>

<h2><a NAME="FrameEvaluate"></a>FrameEvaluate
</h2>
<p><code>FrameEvaluate </code>(<var>clip clip, script function, bool "after_frame"</var>)
<p>フィルタの出力が無視されること以外は、<code>ScriptClip</code> に似ています。これは、変数の割り当てなどのために使用することができます。与えられたクリップのフレームが素通しされます。<br />
v2.53 から、<var>after_frame</var> オプション（true または false）が追加されています。これは、スクリプトの評価が、上述のフィルタからフレームが取得される前（デフォルトの動作）に行われるか、後に行われるかを決定します。</p>

<h2><a name="ConditionalReader"></a>ConditionalReader</h2>
<p>このフィルタは、任意の情報を選択可能な変数にインポートすることを可能にします。</p>

<p><a href="conditionalreader.htm">ConditionalReader</a> の専用ページを参照してください。</p>

<h2><a NAME="RuntimeFunctions"></a>ランタイム関数
</h2>
<p>フレームごとに評価される内部関数です。</p>

<p>平面のピクセル値の平均を返します（要 YV12、ISSE）:<br />
  <code>AverageLuma </code>(<var>clip</var>)<br>
  <code>AverageChromaU </code>(<var>clip</var>)<br>
  <code>AverageChromaV </code>(<var>clip</var>)
</p>

<p>2 つの平面間の差の絶対値を 0 から 255 までの浮動小数点値で返します（要 YV12, ISSE）:<br />
  <code>RGBDifference </code>(<var>clip1, clip2</var>)<br>
  <code>LumaDifference </code>(<var>clip1, clip2</var>)<br>
  <code>ChromaUDifference </code>(<var>clip1, clip2</var>)<br>
  <code>ChromaVDifference </code>(<var>clip1, clip2</var>)
</p>
  
<p>これらの関数を使用するときには、「暗黙の最後の（implicit last）」クリップが存在します（第 1 パラメータを指定する必要がありません）。したがって、第 1 パラメータは <var>testclip</var> に置き換えられます。</p>

<p>シーンチェンジの検出にかなり役立ちます:<br />
  <code>RGBDifferenceFromPrevious </code>(<var>clip</var>)<br>
  <code>YDifferenceFromPrevious </code>(<var>clip</var>)<br>
  <code>UDifferenceFromPrevious </code>(<var>clip</var>)<br>
  <code>VDifferenceFromPrevious </code>(<var>clip</var>)<br>
  <code>RGBDifferenceToNext </code>(<var>clip</var>)<br>
  <code>YDifferenceToNext </code>(<var>clip</var>)<br>
  <code>UDifferenceToNext </code>(<var>clip</var>)<br>
  <code>VDifferenceToNext </code>(<var>clip</var>)<br>
</p>

<pre># シーンチェンジ前の最後のフレームを
# シーンチェンジ後の最初のフレームに置き換える:
ConditionalFilter(last, last, last.trim(1,0), &quot;YDifferenceToNext()&quot;, &quot;&gt;&quot;, &quot;10&quot;, true)</pre>

<h4>その他の内部関数:</h4>
<p><code>YPlaneMax </code>(<var>clip, float threshold</var>)<br>
  <code>UPlaneMax </code>(<var>clip, float threshold</var>)<br>
  <code>VPlaneMax </code>(<var>clip, float threshold</var>)<br>
  <code>YPlaneMin </code>(<var>clip, float threshold</var>)<br>
  <code>UPlaneMin </code>(<var>clip, float threshold</var>)<br>
  <code>VPlaneMin </code>(<var>clip, float threshold</var>)<br>
  <code>YPlaneMedian </code>(<var>clip</var>)<br>
  <code>UPlaneMedian </code>(<var>clip</var>)<br>
  <code>VPlaneMedian </code>(<var>clip</var>)<br>
  <code>YPlaneMinMaxDifference </code>(<var>clip, float threshold</var>)<br>
  <code>UPlaneMinMaxDifference </code>(<var>clip, float threshold</var>)<br>
  <tt><code>VPlaneMinMaxDifference </code></tt>(<i><var>clip, float threshold</var></i>)
</p>

<p><var>threshold</var> はパーセンテージで指定し、ピクセルの何パーセントが最小値を上回るまたは下回ることを許容するかに関係しています。<var>threshold</var> はオプションで、デフォルトは 0 です。</p>

<p>上記の内容を理解したら、条件フィルタリングについてもう少し詳しく解説した「高度な条件フィルタリング」に進むことができます。</p>

<h2>高度な条件フィルタリング: パート 1</h2>
<p>この節を理解するには、AviSynth の機能性について、いくつか知らなければならないことがあります:<br />
スクリプトは上から下へパースされますが、フレームがリクエストされるときには、じつは最後のフィルタが最初に呼び出され、フィルタチェインの中で上方向にフレームをリクエストしていきます。例えば:</p>

<pre>AviSource(&quot;myfile.avi&quot;)
ColorYUV(analyze=true)
Histogram()</pre>

<p>このスクリプトを VirtualDub で開くと、以下のことが起こります:</p>
<ul>
<li>VirtualDub があるフレームをリクエストするとき、AviSynth は Histogram からフレームをリクエストする。</li>
<li>Histogram は、ColorYUV からフレームをリクエストする。</li>
<li>ColorYUV は、フレームを生成する AviSource からリクエストし、それを ColorYUV に渡す。</li>
<li>ColorYUV はその画像を処理して、Histogram に送る。Histogram は、それを VirtualDub に返す。</li>
</ul>

<p>このように、フィルタチェインは、基本的に逆方向に動作します。このことは、フィルタに対し、上方のソースから複数のフレームをリクエストする可能性を与えます。</p>

<p>しかし条件フィルタは、どのフィルタを呼び出すべきかを知る必要があるため、上方のフィルタからフレームをリクエストする<i>前に</i>スクリプトを評価する必要があります。もう 1 つの重要な問題は、条件フィルタ「環境」の中で <code>global</code> に定義された変数のみがその外部でも利用可能であるということです（逆もまた同じ）。次のスクリプトを見てください</p>

<pre>v = AviSource(&quot;E:\Temp\Test3\atomic_kitten.avi&quot;).ConvertToYV12

function g(clip c)
{
&nbsp; <b>global</b> <b>w</b> = c
&nbsp; c2 = ScriptClip(c, &quot;subtitle(t)&quot;)
&nbsp; c3 = FrameEvaluate(c2, &quot;t = String(text)&quot;)
&nbsp; c4 = FrameEvaluate(c3, &quot;text = YDifferenceFromPrevious(<b>w</b>)&quot;)
&nbsp; return c4
}

g(v)</pre>

<p>このフィルタチェインは、次のように動作します:</p>
<ul>
<li>VirtualDub がフレームをリクエストすると、AviSynth は g() からフレームをリクエストする。</li>
<li>g() は、AviSource() からフレームをリクエストする:</li>
  <ul>
  <li>AviSynth は、2 つ目の FrameEvaluate からフレームをリクエストする。</li>
  <li>2 つ目の FrameEvaluate は、AviSource のフレームをリクエストした後に、<i>YDifferenceFromPrevious(w)</i> を評価し、その値を変数 <i>text</i> に割り当てる。この後、フレームが 1 つ目の FrameEvaluate からリクエストされる。</li>
  <li>1 つ目の FrameEvaluate は、「<i>String(text)</i> を評価し、その値を変数 <i>t</i> に割り当てた」後に、ScriptClip からフレームをリクエストする。</li>
  <li>ScriptClip は、ConvertToYV12() からフレームをリクエストし、そのフレーム上で <i>Subtitle(t)</i> を評価する。</li>
  <li>ConvertToYV12() は、AviSource() からフレームをリクエストする。</li>
  </ul>
<li>AviSource() はそのフレームを生成して g() に送る。g() は、それを VirtualDub に返す。</li>
</ul>

<p>見てわかるように、<b>w</b> はグローバル変数として定義されています。このように、条件環境ではこれをスクリプトの後方で使用することができます。もし変数 <b>t</b> と <b>text</b> を別の関数（条件環境の内側でも外側でも）の中で使用したいなら、それらの変数もグローバル変数として定義されなければなりません。したがって、たとえば次のようにします:</p>

<pre>v = AviSource(&quot;E:\Temp\Test3\atomic_kitten.avi&quot;).ConvertToYV12

function g(clip c)
{
&nbsp; global w = c
&nbsp; c2 = ScriptClip(c, &quot;subtitle(<b>t</b>)&quot;)
&nbsp; c3 = FrameEvaluate(c2, &quot;me()&quot;)
&nbsp; c4 = FrameEvaluate(c3, &quot;<b>global</b> <b>text</b> = YDifferenceFromPrevious(w)&quot;)
&nbsp; return c4
}

function me()
{
&nbsp; <b>global</b> <b>t</b> = String(<b>text</b>)
}

g(v)</pre>

<p>上記のスクリプトの大半は冗長で、省略することが可能です。次の 2 つのスクリプトは同じ出力を与えます。</p>

<pre>v = AviSource(&quot;c:\clip.avi&quot;)
scriptclip(v,&quot;
	YDiffPrev = YDifferenceFromPrevious
	YDiffPrevStr = string(YDiffPrev)
	subtitle(YDiffPrevStr)
&quot;)</pre>

<pre>v = AviSource(&quot;c:\clip.avi&quot;)
ScriptClip(v, &quot;Subtitle(String(YDifferenceFromPrevious))&quot;)</pre>

<p>次の節では、フレーム従属情報をテキストファイルに書き出します。</p>

<h2>高度な条件フィルタリング: パート 2</h2>
<p>次の例では、いくつかのフレーム従属情報がテキストファイルに書き出されます。1 つ目の変数「a」は、（ある閾値に対して）そのフレームにコーミング<a href="#footnote_4" class="footnote_link">*4</a>があるかどうかを示します。IsCombed は、Decomb<a href="#footnote_5" class="footnote_link">*5</a> プラグインのフィルタです。2 つ目の変数「b」は、そのフレームの中に「たくさんの」動きがあるかどうかを示します。</p>

<pre>global sep=&quot;.&quot;
global combedthreshold=25

function IsMoving()
{
global b = (diff &lt; 1.0) ? false : true
}

function CombingInfo(clip c)
{
file = &quot;F:\interlace.log&quot;
global clip = c
c = WriteFile(c, file, &quot;a&quot;, &quot;sep&quot;, &quot;b&quot;)
c = FrameEvaluate(c, &quot;global a = IsCombed(clip, combedthreshold)&quot;)
c = FrameEvaluate(c, &quot;IsMoving&quot;)
c = FrameEvaluate(c,&quot;global diff = 0.50*YDifferenceFromPrevious(clip) + 0.25*UDifferenceFromPrevious(clip) + 0.25*VDifferenceFromPrevious(clip)&quot;)
return c
}

v = mpeg2source(&quot;F:\From_hell\from_hell.d2v&quot;).trim(100,124)
CombingInfo(v)</pre>

<p>次の節では、「適応型モーション/リサイズフィルタ」の例について考えます。</p>

<h2>高度な条件フィルタリング: パート 3</h2>

<p>適応型のモーションフィルタやリサイズフィルタが Doom9's Forum に登場しました。これらのフィルタは、クリップにおける動きの少ないシーン、動きの激しいシーン、そしてその中間のシーンを（フレーム単位で）識別します。これにより、クリップにおけるモーションの種類に応じて異なるフィルタを使用することができます。一般的には、動きの少ないシーンでは時間軸の平滑化を、動きの激しいシーンでは空間軸の平滑化を、その中間のシーンでは空間軸＋時間軸の平滑化を使用します。<br />
下にあるのは、HomiE FR 作 QUANTIFIED MOTION FILTER （QMF） v1.5 b1 （10/07/2003）の簡易版です:</p>

<pre># QUANTIFIED MOTION FILTER v1.3 
# AviSynth プラグインの読み込み 
LoadPlugin(&quot;C:\PROGRA~1\GORDIA~1\mpeg2dec3.dll&quot;) 
LoadPlugin(&quot;C:\PROGRA~1\GORDIA~1\TemporalCleaner.dll&quot;) 
LoadPlugin(&quot;C:\PROGRA~1\GORDIA~1\FluxSmooth.dll&quot;) 
LoadPlugin(&quot;C:\PROGRA~1\GORDIA~1\UnFilter.dll&quot;)

# QUANTIFIED MOTION FILTER スクリプト（qmf.avs）の読み込み

Import(&quot;E:\temp\QMF\qmf.avs&quot;)

# ローモーションフィルタ関数
# -&gt; シャープなリサイズ + 時間軸のみ
function Low_Motion_Filter(clip c)
{
&nbsp; c = TemporalCleaner(c, 5, 10)
&nbsp; c = LanczosResize(c, 512, 272)
&nbsp; return c
}

# ミディアムモーションフィルタ関数
# -&gt; ニュートラルなバイキュービックリサイズ + 時間軸および空間軸
function Medium_Motion_Filter(clip c)
{
&nbsp; c = FluxSmooth(c, 7, 7)
&nbsp; c = BicubicResize(c, 512, 272, 0.00, 0.50)
&nbsp; return c
}

# ハイモーションフィルタ関数
# -&gt; ソフトなリサイズ + 空間軸のみ
function High_Motion_Filter(clip c)
{
&nbsp; c = FluxSmooth(c, -1, 14)
&nbsp; c = UnFilter(c, -30, -30)
&nbsp; c = BilinearResize(c, 512, 272)
&nbsp; return c
}

# ビデオソースを開く
AviSource(&quot;E:\temp\QMF\britney-I_love_rock_'n_roll.avi&quot;)
ConvertToYV12(interlaced=true)
Telecide(0)

# 適応型のリサイズフィルタを適用（QMF を使用）
QMF()</pre>

<p>以下のスクリプトを qmf.avs という名前の別のファイルに保存します:</p>

<pre># HomiE FR （homie.fr@wanadoo.fr）作 QUANTIFIED MOTION FILTER （17/08/2003）
# 動き評価（ME）関数
function ME()
{
&nbsp; # 平均の差によって動きのレベルを設定 [1]
&nbsp; <b>global motion_level</b> = (<b>diff</b> &lt; threshold_lm) ? 0 : motion_level
&nbsp; <b>global motion_level</b> = (<b>diff</b> &gt;= threshold_lm &amp;&amp; <b>diff</b> &lt;= threshold_hm) ? 1 : motion_level
&nbsp; <b>global motion_level</b> = (<b>diff</b> &gt; threshold_hm) ? 2 : motion_level
}

# QUANTIFIED MOTION FILTER （QMF）関数
function QMF(clip c, float &quot;threshold_lm&quot;, float &quot;threshold_hm&quot;, bool &quot;debug&quot;)
{
&nbsp; # 動きのレベルの閾値を設定 [2]
&nbsp; threshold_lm = default(threshold_lm, 4.0)
&nbsp; threshold_hm = default(threshold_hm, 12.0)
&nbsp; global threshold_lm = threshold_lm
&nbsp; global threshold_hm = threshold_hm

&nbsp; # デバッグ情報を有効化または無効化する [3]
&nbsp; debug = default(debug, false)

&nbsp; # 動きのレベルを初期化
&nbsp; global motion_level = 0

&nbsp; # 現在のクリップを設定 [4]
&nbsp; global clip = c

&nbsp; # 出力解像度を取得 [5]
&nbsp; width = Width(Low_Motion_Filter(c))
&nbsp; height = Height(Low_Motion_Filter(c))
&nbsp; global c_resized = PointResize(c, width, height)

&nbsp; # 動きのレベルに応じてモーションフィルタを適用 [6]
&nbsp; c = ConditionalFilter(c, Low_Motion_Filter(c), c_resized, &quot;<b>motion_level</b>&quot;, &quot;=&quot;, &quot;0&quot;)&nbsp; # [6a]
&nbsp; c = ConditionalFilter(c, Medium_Motion_Filter(c), c, &quot;<b>motion_level</b>&quot;, &quot;=&quot;, &quot;1&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # [6b]
&nbsp; c = ConditionalFilter(c, High_Motion_Filter(c), c, &quot;<b>motion_level</b>&quot;, &quot;=&quot;, &quot;2&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # [6c]

&nbsp; # デバッグ情報を表示 [7]
&nbsp; c = (debug == true) ? ScriptClip(c, &quot;Debug()&quot;) : c

&nbsp; # 動き評価関数を通して、動きのレベルを取得 [8]
&nbsp; c = FrameEvaluate(c, &quot;ME()&quot;)

&nbsp; # 過去/現在のフレームの間の差を取得 [9]
&nbsp; c = FrameEvaluate(c, &quot;<b>global diff</b> = 0.50*YDifferenceFromPrevious(clip) + 0.25*UDifferenceFromPrevious(clip) + 0.25*VDifferenceFromPrevious(clip)&quot;)
&nbsp; return c
}

# デバッグ情報関数
function Debug(clip c)
{
&nbsp; # バージョン情報を表示 [10]
&nbsp; c = Subtitle(c, &quot;Quantified Motion Filter&quot;, x=20, y=30, font=&quot;lucida console&quot;, size=18, text_color=$FFFFFF)
&nbsp; c = Subtitle(c, &quot;by HomiE FR (homie.fr@wanadoo.fr)&quot;, x=20, y=45, font=&quot;lucida console&quot;, size=14, text_color=$FFFFFF)

&nbsp; # 動き評価の情報を表示 [11]
&nbsp; c = Subtitle(c, &quot;motion estimation&quot;, x=20, y=85, font=&quot;lucida console&quot;, size=18, text_color=$FFFFFF)
&nbsp; c = Subtitle(c, &quot;diff = &quot;+string(<b>diff</b>), x=20,y=110, font=&quot;lucida console&quot;, size=16, text_color=$FFCCCC)

&nbsp; # QMF の情報を表示 [12]
&nbsp; c = Subtitle(c, &quot;quantified motion filter&quot;, x=20, y=135, font=&quot;lucida console&quot;, size=18, text_color=$FFFFFF)
&nbsp; c = (<b>motion_level</b> == 0) ? Subtitle(c, &quot;scene type = low motion&quot;, x=20, y=160, font=&quot;lucida console&quot;, size=16, text_color=$66FF66) : c
&nbsp; c = (<b>motion_level</b> == 1) ? Subtitle(c, &quot;scene type = medium motion&quot;, x=20, y=160, font=&quot;lucida console&quot;, size=16, text_color=$66FF66) : c
&nbsp; c = (<b>motion_level</b> == 2) ? Subtitle(c, &quot;scene type = high motion&quot;, x=20, y=160, font=&quot;lucida console&quot;, size=16, text_color=$66FF66) : c
&nbsp; return c
}</pre>

<p>このフィルタチェインは、次のように動作します:</p>

<ul>
<li>VirtualDub がフレームをリクエストすると、AviSynth は QMF からフレームをリクエストする。</li>
  <ul>
  <li>QMF は FrameEvaluate [9] からフレームをリクエストする。</li>
  <li>この後 [9] のスクリプトが評価され、AviSource からフレームをリクエストした後にグローバル変数 <i>diff</i> が割り当てられる。FrameEvaluate [9] は、FrameEvaluate [8] からフレームをリクエストする。</li>
  <li>もう一度 [8] のスクリプトが評価される:</li>
    <ul>
    <li>ME() を評価するとき、グローバル変数 <i>motion_level</i> がそのフレームに対して割り当てられる [1]</li>
    </ul>
  <li>debug=true なら、フレームは ScriptClip [7] すなわち Debug() からリクエストされる。</li>
  <li>その後（もしくは debug=false のとき）、フレームは直前の ConditionalFilter [6c] からリクエストされる。[6c] は [6b] からフレームをリクエストし、さらに [6b] は [6a] からフレームをリクエストする。</li>
    <ul>
    <li>最後に、High_Motion_filter、Medium_Motion_filter または Low_Motion_filter のフレームは、<i>motion_level</i> の値にしたがってリクエストされる。</li>
    </ul>
  </ul>
<li>QMF は Telecide から、Telecide は ConvertToYV12 から、そして最後に ConvertToYV12 は AviSource から、それぞれフレームをリクエストする。</li>
<li>AviSource はそのフレームを生成して ConvertToYV12 に送る、など。</li>
</ul>

<p>細かい部分はいくつか省略しましたが、このスクリプトは基本的にこのように動作します。</p>

<p><kbd>原文 Date: 2008/02/10 13:57:17</kbd><br />
<kbd>日本語訳 $Date: 2008/06/28 00:58:30 $</kbd></p>

<form><input TYPE="Button" VALUE="戻る"
onClick="history.go(-1)"></form>

<hr />
<div id="footnote">
<ul>
  <li>訳者註:
    <ul>
      <li><a name="footnote_1" class="footnote_link">*1</a> <span class="footnote_text">日本語で「等しい」。</span></li>
      <li><a name="footnote_2" class="footnote_link">*2</a> <span class="footnote_text">日本語で「より大きい」。</span></li>
      <li><a name="footnote_3" class="footnote_link">*3</a> <span class="footnote_text">日本語で「より小さい」。</span></li>
      <li><a name="footnote_4" class="footnote_link">*4</a> <span class="footnote_text">櫛（comb）状のノイズ。参考: <a href="http://dtv.sakura.ne.jp/contents1/007.html">インターレースとは(2)</a>、<a href="http://homepage3.nifty.com/sony/sd/contents/pc_word_z1k.htm">ＰＣ用語集　か　～ののキューブ　～</a></span></li>
      <li><a name="footnote_5" class="footnote_link">*5</a> <span class="footnote_text"><a href="http://neuron2.net/decomb/decombnew.html">Filters for Avisynth and VirtualDub -- My Filters and Tools</a> を参照。</span></li>
    </ul>
  </li>
</ul>
</div>

</body>
</html>
