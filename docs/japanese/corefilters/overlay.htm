<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <title>Overlay フィルタ</title>
   <link rel="stylesheet" type="text/css" href="../../avisynth.css">
   <link rel="stylesheet" type="text/css" href="../ja.css">
</head>
<body >
<h2>
<a name="Overlay"></a>Overlay
</h2>
<p align="left"><code>Overlay </code>(<var>clip, clip overlay, int "x", int "y",
  clip "mask", float "opacity", string "mode", bool "greymask", string "output",
  bool "ignore_conditional", bool "pc_range"</var>)<br>
<br>
<code>Overlay</code> は、さまざまなオーバーレイ<a href="#footnote_1" class="footnote_link">*1</a>手法を使って、オプションでオーバーレイする画像の座標をずらして 2 つのクリップを重ねます。さらに overlay クリップの不透明度を調整することも可能です。<br>
<br>
入力は、どのような色空間でもかまいません。異なるクリップの色空間は問題にならないのです！入力クリップは、内部で一般的な YUV フォーマット（色差のサブサンプリングなし）に変換されます。このため、入力とは別の色空間で出力することも可能です。また、異なる色空間のビデオも、シームレスに変換されるため、入力が可能です。しかし、（<a href="convert.htm"><code>Convert</code></a> フィルタに比べて）遅くてわずかに品質も劣るため、色空間変換のため”だけ”に Overlay フィルタを使用することはおすすめできません。&nbsp;<br>
<br>
通常、すべてのクリップは 0-&gt;255 の値を持っているものとして扱われます。要するに、数値は ITU-R BT.601 の範囲でクリッピングされません。このタスクを遂行するには、あとで <a href="limiter.htm"><code>Limiter</code></a> を使用してください。<br>
<i><b>マスクも 0-&gt;255 の値を持つべきです。</b></i>色の分布を見るには、<a href="histogram.htm"><code>Histogram</code></a> を <code>Histogram</code>(&quot;levels&quot;) モードで使用することができます。もしマスクが ITU-R BT.601 の範囲にあるなら、色のレベルをアップスケールするために <a href="coloryuv.htm"><code>ColorYUV</code></a>(levels=&quot;TV-&gt;PC&quot;) を使用してください。<br>
<br>
何をやっているのか理解していない限り、インターレース素材にオーバーレイを実行することは推奨されません。

<h4 align="left"><b>パラメータ:</b></h4>
<p align="left"><b>clip</b><br>
このクリップがベースになります。overlay 画像は、この上に配置されます。&nbsp;
<p align="left"><b>overlay</b><br>
こちらがベースクリップの上に配置される画像です。色空間や画像の大きさは、ベースクリップと一致する必要はありません。
<p align="left"><b>x と y</b><br>
これらの 2 つの変数は、ベースクリップ上の overlay 画像の位置をピクセル単位で定義します。正の数または負の数を指定することができます。<br>
<i>デフォルト値は 0 です。</i>
<p align="left"><b>mask</b><br>
このクリップは、overlay 画像の透明度マスクとして使用されます。mask は、overlay クリップと同じ大きさでなければなりません。デフォルトでは、画像のグレースケール（輝度）成分のみが使用されます。この画像が暗ければ暗いほど、overlay 画像はより透明になります。<br>
<i>デフォルト値はありませんが、指定なしで 255 のクリップ<a href="#footnote_2" class="footnote_link">*2</a>を供給するのと同じになります。</i>
<p align="left"><b>opacity</b><br>
このパラメータは、画像がどの程度透明になるかを設定します。値は 0.0 から 1.0 までで、0.0 なら透明、1.0 なら完全に不透明です（マスク不使用の場合）。マスクと併用した場合、この値にマスクの値が掛け合わされ、最終的な不透明度が決定されます。<br>
<i>デフォルト値は 1.0 です。</i>
<p align="left"><b>mode</b><br>
mode（モード） は、クリップが画像の上にオーバーレイされる方法を定義します。&nbsp;
<table border="1" width="100%">
  <tr>
    <th width="8%"><b>モード</b></th>
    <th width="92%"><b>説明</b></th>
  </tr>
  <tr>
    <td width="8%">Blend</td>
    <td width="92%">これがデフォルトのモードです。opacity が 1.0 で、かつ mask がない場合、overlay 画像はオリジナルの上面にコピーされます。さもなければ、普通の透明ブレンドが使われます。</td>
  </tr>
  <tr>
    <td width="8%">Add</td>
    <td width="92%">overlay ビデオをベースビデオに付け足して、ビデオを明るくします。RGB と同等にするために、明るすぎる輝度領域は色差に影響を与えていて、より白っぽくしています。</td>
  </tr>
  <tr>
    <td width="8%">Subtract</td>
    <td width="92%">Add の反対。こちらは領域を暗くします。</td>
  </tr>
  <tr>
    <td width="8%">Multiply</td>
    <td width="92%">これも画像を暗くしますが、subtract とは異なる動作をします。</td>
  </tr>
  <tr>
    <td width="8%">Chroma</td>
    <td width="92%">overlay クリップの色情報のみをベース画像にオーバーレイします。</td>
  </tr>
  <tr>
    <td width="8%">Luma</td>
    <td width="92%">overlay クリップの輝度情報のみをベース画像にオーバーレイします。</td>
  </tr>
  <tr>
    <td width="8%">Lighten</td>
    <td width="92%">overlay がベース画像より明るい場合にのみ、明るさの情報を overlay クリップからベースクリップへコピーします。</td>
  </tr>
  <tr>
    <td width="8%">Darken</td>
    <td width="92%">overlay がベース画像より暗い場合にのみ、明るさの情報を overlay クリップからベースクリップへコピーします。</td>
  </tr>
  <tr>
    <td width="8%">SoftLight</td>
    <td width="92%">overlay クリップの明るさのレベルに基づいて、ベースクリップを明るくまたは暗くします。overlay が輝度 = 128 より暗いなら、ベース画像は暗くなります。overlay が輝度 = 128 より明るいなら、ベース画像は明るくなります。これは画像に影を付け足すのに役立ちます。純粋な黒または白で塗りつぶすと、はっきりと暗いまたは明るい領域が作られますが、純粋な黒または白にはなりません。</td>
  </tr>
  <tr>
    <td width="8%">HardLight</td>
    <td width="92%">overlay クリップの明るさのレベルに基づいて、ベースクリップを明るくまたは暗くします。overlay が輝度 = 128 より暗いなら、ベース画像は暗くなります。overlay が輝度 = 128 より明るいなら、ベース画像は明るくなります。これは画像に影を付け足すのに役立ちます。純粋な黒または白で塗りつぶすと、純粋な黒または白になります。</td>
  </tr>
  <tr>
    <td width="8%">Difference</td>
    <td width="92%">ベースクリップと overlay の差を表示します。<a href="subtract.htm">Subtract</a> のように、差が 0 の領域は灰色で表示されますが、輝度 = 126 ではなく 128 が使用されます。純粋な差を表示したいなら、mode=&quot;Subract&quot; を使うか、<a href="coloryuv.htm">ColorYUV</a>(off_y=-128) を付け足してください。</td>
  </tr>
  <tr>
    <td width="8%">Exclusion</td>
    <td width="92%">overlay 画像の輝度に基づいて画像を反転します。白とブレンドするとベースの色の値を反転しますが、黒とブレンドすると何の変化も起こりません。</td>
  </tr>
</table>
<p align="left"><i>デフォルト値は Blend です。</i>
<p align="left"><b>greymask</b><br>
このオプションは、色差の透明度のために mask の色差を使用するかどうかを指定します。一般的な目的のためには、このモードは無効化されるべきではありません。mSharpen や Masktools のような外部フィルタは、適切な色差のマップをエクスポートすることができます。<br>
<i>デフォルト値は、true です。</i>
<p align="left"><b>output</b><br>
Overlay フィルタに別の色空間を返すことを可能にします。可能な出力色空間は、&quot;YUY2&quot;、&quot;YV12&quot;、&quot;RGB32&quot; と &quot;RGB24&quot; です。<br>
<i>デフォルトは、入力（ベースクリップ）のカラーフォーマットです。</i>
<p align="left"><b>ignore_conditional</b><br>
与えられた条件変数を Overlay に無視させます。条件変数の概要については「条件変数」の項を参照してください。<br>
<i>デフォルトは false です。</i>
<p align="left"><b>pc_range</b><br>
true に設定すると、内部の RGB -&gt; YUV -&gt; RGB 変換はすべて、輝度の範囲がデフォルトの 16-&gt;235 ではなく 0 から 255 までと仮定されます。何を行っているのか理解している場合にのみ、この設定を変更することをおすすめします。下記の「RGB で考慮すべき事柄」の項を参照。<br>
<i>デフォルトは false です。</i>

<h3 align="left">RGB で考慮すべき事柄</h3>
<p align="left">この節では、1 つ以上の RGB ソースを与えられたときに Overlay が取る挙動に関する説明を行います。<br>
Overlay に対する 1 つ以上の入力は、RGB データであることを許可されています。しかしながら、Overlay は YUV 色空間で素材を処理しているため、RGB から YUV への変換が生じます。この変換には「pc_range」パラメータによって有効/無効が切り替えられる 2 つのモードがあります。このパラメータは、YUV の範囲を 16-235 （これはすべての AviSynth 変換で使われている範囲です）から 0-255 に伸張します。pc_range を有効化した方がいいケースがいくつかあります:
<ul>
  <li>
    <p align="left">&quot;add&quot; モード、&quot;subtract&quot; モード、または &quot;multiply&quot; モードを使って RGB クリップをオーバーレイするとき、真っ暗な領域が（すべての値に 16 を足す代わりに）結果に影響を与えられなくするために、overlay クリップの範囲は 0-255 の方が好ましいです。
  </li>
  <li>
    <p align="left">出力時に色空間変換を行わ<b>ない</b>とき。出力色空間（RGB 対 YUV）が入力と異なるなら、スケールが間違っています。pc_range が true で、かつ、入力が RGB、出力が YUY2 なら、YUY2 は無効な範囲（ITU-R BT.601 の範囲ではない）を含みます。
  </li>
</ul>
<p align="left"><b>RGB 出力</b></p>
<p align="left">たとえ入力色空間が RGB であっても、YUV から RGB への色空間の再変換を回避するために、Overlay に YUY2 で出力させた方がいいかもしれません。しかし、pc_range = true を使用している場合、上述のように、素材が「オーバースケールされている」かもしれないということを知っておくべきです。16-235 の範囲に変換し戻すために、「ColorYUV(levels=&quot;pc-&gt;tv&quot;)」を使ってこれを補正することができます。</p>
<p align="left"><b>mask クリップに対する RGB 入力</b></p>
<p align="left">RGB の mask クリップは、予想されるのとは少し異なった反応を示します。もしつねにグレースケールのマスクを使用しているのなら、「greymask」を無効にしないでください。そうすれば、期待通りの結果が得られるでしょう。mask クリップの値は伸張されないということに注意すべきです。RGB 値から直接コピーされ、自動的に 0-&gt;255 の範囲になります。</p>
<p><strong>RGB32 のアルファチャンネルの使用</strong></p>
<p>Overlay は、RGB32 クリップで与えられるアルファチャンネルを使用しません。RGB32 クリップのアルファチャンネルを抽出したいのなら、アルファ情報を抽出するために <a href="showalpha.htm"><code>ShowAlpha</code></a> コマンドを使用することができます。最高品質を維持するには、RGB としてアルファを抽出することをおすすめします。</p>

<h3 align="left">条件変数</h3>
<p align="left">グローバル変数の「<i>OL_opacity_offset</i>」、「<i>OL_x_offset</i>」、「<i>OL_y_offset</i>」は、フレームごとに読み込まれ、適用されます。<a href="conditionalfilter.htm"><code>FrameEvaluate</code></a> を使って、これらの変数を修正することが可能です。これらの変数の値は、各フレームのオリジナルの値に足されます。もしフィルタパラメータとして「x = 100」と指定し、かつ、グローバル変数「<i>OL_x_offset</i>」が 50 に設定されたなら、overlay クリップは x = 150 に配置されます。<br>
<br>
もし複数のフィルタを使用しているのなら、「ignore_conditional = true」パラメータを使って、これを無効化することも可能です。</p>
<p align="left"><a href="conditionalreader.htm"><code>ConditionalReader</code></a> のページには、条件修正の使用例があります。</p>

<h3 align="left">使用例</h3>
<p align="left"># いくつかのソースを用意してください。</p>
<div align="left">
<pre align="left">bg = colorbars(512,384).converttoyuy2()
text = blankclip(bg).subtitle(&quot;Colorbars&quot;, size=92, text_color=$ffffff).coloryuv(levels=&quot;tv-&gt;pc&quot;)</pre>
</div>
<p align="left"># 3 つの異なるバージョンでテキストをオーバーレイする。</p>
<div align="left">
<pre align="left">overlay(bg, text, x=50, y=20, mode=&quot;subtract&quot;, opacity=0.25)
overlay(text, x=50, y=120, mode=&quot;add&quot;, opacity=0.5)
overlay(text, x=50, y=240, mode=&quot;blend&quot;, opacity=0.7)</pre>
</div>
<p># yuy2 マスクを使って yuy2clip を rgbclip にオーバーレイする（マスクの輝度の範囲は [0-255] です）。
<pre>Overlay(yuy2clip, rgbclip, mask = rgbclip.ShowAlpha(&quot;yuy2&quot;))</pre>
<p># 下に同じ
<pre>mask = rgbclip.ShowAlpha(&quot;rgb&quot;).ConvertToYUY2.ColorYUV(levels=&quot;TV-&gt;PC&quot;)
Overlay(yuy2clip, rgbclip, mask)</pre>
<p># 下に同じ
<pre>mask = rgbclip.ShowAlpha(&quot;rgb&quot;)
Overlay(yuy2clip, rgbclip, mask)</pre>
<p># 2 つのクリップの平均をとる。例えばノイズ低減のために 2 つの異なる放送のキャプチャを合成するために使用することができる。このアイデアに関する議論は [<a href="http://forum.doom9.org/showthread.php?s=&amp;threadid=28438">こちら</a>にある。サンプルスクリプト（もちろん 2 つのクリップのフレームが正確に一致することを確保しなければならない。必要なら <a href="deleteframe.htm">DeleteFrame</a> を使用すること）:</p>
<pre>clip1 = AviSource(&quot;F:\shakira-underneath_your_clothes.avi&quot;)
clip2 = AviSource(&quot;F:\shakira-underneath_your_clothes2.avi&quot;)
Overlay(clip1, clip2, mode=&quot;blend&quot;, opacity=0.5)</pre>
<p># 青色（または他の色）の背景（blue.jpg は黒色の長方形の中に字幕をオーバーレイした青色のフレーム）をマスクとして使用。字幕を含む黒色の長方形はソースクリップ（ここでは ColorBars）の上に見える:</p>
<pre>testcard = ColorBars()

# 青色のマスククリップを取得（ColorBars と同じ青色を使用: R16 G16 B180）
maskclip = BlankClip(clip=testcard, color=$0f0fb4)

# 上述のとおり青色の背景付きの字幕ファイルの例
subs = ImageSource(&quot;F:\TestClips\blue.jpg&quot;).ConvertToRGB32

maskclip = ColorKeyMask(subs, $0f0fb4, 60)

Overlay(testcard, subs, mask=ShowAlpha(maskclip), mode=&quot;blend&quot;, opacity=1)</pre>
<table border="1" width="50%">
  <tr>
    <td width="25%" align="center"><img border="0" src="../pictures/corefilters/overlay_blue.jpg" width="320" height="240"></td>
    <td width="25%" align="center"><img border="0" src="../pictures/corefilters/overlay_subs.png" width="320" height="240"></td>
  </tr>
</table>
<p>青色が完全に均一ではないため、tolerance<a href="#footnote_3" class="footnote_link">*3</a> = 60 が使用されています。黒い長方形の近くでは、青色は R23 G22 B124 になっています。おそらく blue.jpg の圧縮によるものでしょう。</p>
<p># ConditionalReader を使ってクリップ上の赤色（または他の色）の点を移動させる（dot.bmp は黒色の背景の上に赤色の点がある）:</p>
<pre>a1 = ColorBars().Trim(0,399)
a2 = ImageSource(&quot;F:\TestClips\dot.bmp&quot;).ConvertToRGB32

# a2.GreyScale は黒色の背景の上にある灰色の点を返し、Levels はそのドットを白にする
mask_clip = Mask(a2, a2.GreyScale.Levels(0, 1, 75, 0, 255))
Overlay(a1, a2, mask=ShowAlpha(mask_clip), y=0, x=0, mode=&quot;blend&quot;, opacity=1)

ConditionalReader(&quot;xoffset.txt&quot;, &quot;ol_x_offset&quot;, false)
ConditionalReader(&quot;yoffset.txt&quot;, &quot;ol_y_offset&quot;, false)</pre>
<p>以下のように、移動する点の x 座標を含む xoffset.txt と y 座標を含む yoffset.txt を作成してください（詳しくは <a href="conditionalreader.htm">ConditionalReader</a> を参照）。そして、それらのテキストファイルを AviSynth スクリプトと同じフォルダに置いてください:</p>
<table border="1" width="100%">
  <tr>
    <td width="50%">
      <pre>xoffset.txt

Type int
Default -50

R 0 100 20
I 100 200 20 250
R 200 300 250
I 300 400 250 400</pre>
    </td>
    <td width="50%">
      <pre>yoffset.txt

Type int
Default -50

R 0 100 20
I 100 200 20 350
R 200 300 350
I 300 400 350 40</pre>
    </td>
  </tr>
</table>
<table border="1" width="100%">
  <tr>
    <td width="50%" align="center"><img border="0" src="../pictures/corefilters/overlay_dot.png" width="320" height="240"></td>
    <td width="50%" align="center"><img border="0" src="../pictures/corefilters/overlay_dot2.png" width="320" height="240"></td>
  </tr>
</table>
<p>点は、次のように移動します: (20,20) -&gt; (250,350) -&gt; (400,40)。Animate を使って同様のことを行うことも可能です。</p>
<h3>更新履歴:</h3>
<table border="1" width="100%">
  <tr>
    <td width="8%"> v2.54</td>
    <td width="92%"> 初版</td>
  </tr>
</table>
<p align="left"><kbd>原文 Date: 2007/12/03 22:56:04</kbd><br />
<kbd>日本語訳 $Date: 2008/06/28 00:58:31 $</kbd></p>
<form>
  <p><input TYPE="Button" VALUE="戻る"
onClick="history.go(-1)"></p>
</form>

<hr />
<div id="footnote">
<ul>
  <li>訳者註:
    <ul>
      <li><a name="footnote_1" class="footnote_link">*1</a> <span class="footnote_text">参考: <a href="http://ja.wikipedia.org/wiki/%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AC%E3%82%A4_(%E6%83%85%E5%A0%B1%E5%B7%A5%E5%AD%A6)#.E3.82.AA.E3.83.BC.E3.83.90.E3.83.BC.E3.83.AC.E3.82.A4.E8.A1.A8.E7.A4.BA">オーバーレイ (情報工学) - Wikipedia</a></span></li>
      <li><a name="footnote_2" class="footnote_link">*2</a> <span class="footnote_text">完全に白色のクリップに相当します。つまり、overlay 画像は完全に不透明になります。</span></li>
      <li><a name="footnote_3" class="footnote_link">*3</a> <span class="footnote_text">ColorKeyMask の tolerance パラメータ。<a href="layer.htm">Layer</a> の ColorKeyMask の節を参照。</span></li>
    </ul>
  </li>
</ul>
</div>

</body>
</html>
