<HTML>
<head>
<meta http-equiv="Content-type" content="text/html; charset=iso-8859-2" />   
<TITLE>BicubicResize / BilinearResize / LanczosResize / PointResize</TITLE>

<link rel="stylesheet" type="text/css" href="style2.css">

</HEAD>

<h3>[yv12][yuy2][rgb32][rgb24]</h3>
<h1>BicubicResize / BilinearResize / LanczosResize / PointResize</h1>
<h2><b>BicubicResize</b>(clip, int target_width, int target_height, float "b", float
&quot;c&quot;<br>
[, float "src_left", float "src_top", float "src_width", float
&quot;src_height&quot;])<br>
<br>
<b>BilinearResize</b>(clip, int target_width, int target_height<br>
[, float "src_left", float "src_top", float "src_width", float
&quot;src_height&quot;])<br>
<br>
<b>LanczosResize</b>(clip, int target_width, int target_height<br>
[, float "src_left", float "src_top", float "src_width", float
&quot;src_height&quot;])<br>
<br>
<b>PointResize</b>(clip, int target_width, int target_height<br>
[, float "src_left", float "src_top", float "src_width", float "src_height"])</h2>

<hr>

<p><i><b>target_width/target_height</b></i>: okre¶la szeroko¶æ/wysoko¶æ w
klipie wynikowym
<br>
<br>
<i><b>b, c</b></i>: modyfikuje w³a¶ciwo¶ci cubic klipu wynikowego. Warto¶ci
nieujemne s± zarezorwowane dla <i><b>b</b></i>, a <b><i>c</i></b> nie mo¿e byæ
wiêksza lub równa 0.6. Domy¶lnie, oba argumenty, przyjmuj± warto¶æ 1/3<br>
<br>
<i><b>left/top/width/height</b></i>: przycina klip z lewej strony/u góry/z
prawej strony/na dole klipu (przycina od lewej strony - dla <b><i>left</i></b> i
<b><i>width</i></b> - od góry dla <b><i>top</i></b> i <i><b>height</b></i>)</p>

<hr>

<p>Filtry te s³u¿± do zmiany rozdzielczo¶ci w klipie video, tak wiêc, je¿eli materia³ wej¶ciowy i wyj¶ciowy ma t± sam± rozdzielczo¶æ
filtry te mog± zostaæ pominiête.&nbsp;<br>
Dodatkowe argumenty (te w kwadratowych nawiasach) maj± takie same dzia³anie jak filtr Crop, u¿yty przed filtrem Resize, jednak mo¿e byæ niewielka ró¿nica w prêdko¶ci:<br>
<br>
<i>Crop(10,10,200,300).BilinearResize(100,150)&nbsp;<br>
</i><br>
  ten sam efekt mo¿na uzyskaæ nastêpuj±co:<br>
<br>
<i>BilinearResize(100,150,10,10,200,300)<br>
<br>
</i>Filtr, który jest okre¶lony jako pierwszym jest zdeterminowany przez ten, który ma mniejszy stosunek ograniczeñ. Jest to zrobione
po to, by zachowaæ jak najlepsz± jako¶æ, tak wiêc, drugi w kolejno¶ci filtr ma do dyspozycji mo¿liwie jak najlepsz± jako¶æ obrazu.<br>
<br>
Filtr <b> BilinearResize</b> przeskaluje klatki w wej¶ciowym materiale video do przypadkowej nowej rozdzielczo¶ci.
<b> BilinearResize</b> wykorzystuje standardowe, dwuliniowe filtrowanie i jest prawie identyczny do filtru
<i>'precise bilinear'</i> w VirtualDub'ie. Tylko 'prawie', poniewa¿ wydaje siê, ¿e filtr VirtualDub'a zaczyna skalowanie odrobinê b³êdnego wspó³czynnika i w rezultacie piksele w klipie na górze albo po prawej stronie s± przycinane lub
powielane (b³±d ten mo¿na zauwa¿yæ kiedy rozszerzy siê rozmiar klatki, ale jest on nieznaczny i wiêkszo¶æ u¿ytkowników po prostu tego nie wychwyci, wiêc nie jest to powód to zmartwieñ).<br>
<br>
<b>BicubicResize</b> jest podobny do <b> BilinearResize</b> tylko, ¿e zamiast filtrowania liniowego u¿ywa dwu czê¶ciowej cubic Mitchell-Netravali.<br>
Argumenty <b><i> b</i></b> i <b><i> c</i></b> mog± byæ u¿yte do modyfikacji w³a¶ciwo¶ci cubic. Czasami wystêpuj± b³êdy takie jak rozmazywanie obrazu czy powstawanie tzw. pier¶cieni.<br>
Przy ustawieniu b=0 i c=0.75 filtr pracuje w³a¶ciwie tak samo jak <i>'precise bicubic'</i> w
VirtualDub'ie i rezultaty s± identyczne oprócz problemu VirtualDub'a ze skalowaniem. Domy¶lnie argumenty
<b><i> b</i></b> i <b><i> c</i></b> przyjmuj± warto¶æ 1/3, która jest warto¶ci± sugerowan± przez Mitchell&#8217;a i Netravali&#8217;ego jako przynosz±ca najlepsze efekty wizualne w subiektywnym
testowaniu (natomiast Catmull-Rom sugeruje takie warto¶ci: b = 0 i c = 0.5). Wy¿sze warto¶ci dla b i c mog± wytworzyæ interesuj±cy efekt op-art &#8211; dla przyk³adu
mo¿na spróbowaæ: b = 0 i c = -5.&nbsp;<br>
<br>
Je¶li rozdzielczo¶æ klipu ma zostaæ powiêkszona to znacznie lepsze rezultaty otrzyma siê z filtrem
<b> BicubicResize</b> ni¿ <b> BilinearResize</b>. Jednak¿e, je¶li rozdzielczo¶æ klipu ma zostaæ pomniejszona, prawdopodobnie, lepszy rezultat uzyska siê przy pomocy filtra
<b> BilinearResize</b>. Chocia¿ filtr <i>'bicubic'</i> w VirtualDub'ie pomniejsza
klip lepiej to i tak daje gorszy efekt. Filtr VirtualDub'a wyostrza obraz i
dlatego wydaje siê, ¿e lepiej pomniejsza klip, nie ma wcale lepszego próbkowania. Wyostrzony obraz jest mi³y dla
oka przy podgl±dzie, jednak po kompresji nie jest ju¿ tak klarownie. <b> BicubicResize</b> domy¶lnie nie wyostrza tak
bardzo jak <i>'bicubic'</i> w VirtualDub'ie, ale mimo to wyostrza bardziej ni¿ <i>'bilinear'</i>. Je¶li
planowana jest kompresja video z niskim bitrate s³usznym wyborem bêdzie
skorzystanie z filtra <b> BilinearResize</b>.<br>
<br>
Dla c>0.6 uzyska siê niepo¿±dany efekt tzw. pier¶cieni. Natomiast argument b powinien przyjmowaæ warto¶ci nieujemne. Je¿eli wyostrzanie nie zostanie okre¶lone to wyj¶ciowe video mo¿e byæ zbli¿one do jako¶ci telewizyjnej.&nbsp;<br>
<br>
<b>LanczosResize</b> jest alternatywnym rozwi±zaniem dla filtra <b> BicubicResize</b> z wiêkszymi warto¶ciami dla
<i> c</i> (oko³o 0.6-0.75), które powoduj± ca³kiem silne wyostrzenie. Filtr ten zazwyczaj wytwarza
najlepsz± jako¶æ (najmniej artefaktów) i lepsz± ostro¶æ obrazu.<br>
<br>
<b>PointResize</b> jest najprostszym z mo¿liwych filtrów zmieniaj±cych rozdzielczo¶æ. U¿ywa algorytmu Point Sampler (punktowego próbkowania) lub Nearest Neighbour (najbli¿ej s±siada), który zazwyczaj wytwarza video bardzo blocky (blokowe?!). Wiêc generalnie filtru tego nie powinno siê u¿ywaæ w normalnych kompresjach, chyba, ¿e zamierza siê uzyskaæ gorsz± jako¶æ obrazu. Filtr ten jest bardziej przydatny do powiêkszania ma³ych obszarów, by potem go przeanalizowaæ.</p>

<hr>

<p><b>Przyk³ady:</b>
  <table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
      <td width="229" valign="top" align="left"><p>AVISource(&quot;video.avi&quot;)<br>
        BilinearResize(240,180)</p></td>
            <td width="11" valign="top" align="left">
        <p>#</p>
      <td width="*%" valign="top" align="left"><p>
 wczytuje plik video i zmienia jego rozdzielczo¶æ na  240x180 (nie ma znaczenia jaka rozdzielczo¶æ by³a wcze¶niej)</p></td>
    </tr>
    <tr>
      <td width="229" valign="top" align="left"><p>&nbsp;</p></td>
      <td width="11" valign="top" align="left">
        </td>
      <td width="*%" valign="top" align="left">
        </td>
    </tr>
  <tr>
      <td width="229" valign="top" align="left"><p>AVISource(&quot;dv.avi&quot;)<br>
        BilinearResize(352,240,8,0,704,480)</p></td>
            <td width="11" valign="top" align="left">
        <p>#</p>
      <td width="*%" valign="top" align="left"><p>
 wczytuje klip o rozdzielczo¶ci 720x480 (CCIR601) i zmienia jego rozdzielczo¶æ na 352x240
 (VCD), zachowuje poprawny aspekt</p></td>
    </tr>
    <tr>
      <td width="229" valign="top" align="left"><p>&nbsp;</p></td>
      <td width="11" valign="top" align="left">
        </td>
      <td width="*%" valign="top" align="left">
        </td>
    </tr>
<tr>
      <td width="229" valign="top" align="left"><p>BilinearResize(320,240,160,0,160,120)</p></td>
            <td width="11" valign="top" align="left">
        <p>#</p>
      <td width="*%" valign="top" align="left"><p>
 wyci±ga bardziej poprawny quadrant of a 320x240 video i powiêksza go wype³niaj±c ca³± klatkê</p></td>
    </tr>
    </table>
<hr>

<h3>translated by Slim</h3>

</HTML>