<!doctype html public "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<title>Layer Avisynth Filter</title>
<link rel="stylesheet" type="text/css" href="../../avisynth.css">
</head>
<body >
<h2><a name="Layer"></a>Layer <em>[yuy2][rgb32]</em></h2>
<p><code>Layer </code>(<var>base_clip, overlay_clip, string &quot;op&quot;, int &quot;level&quot;, 
  int &quot;x&quot;, int &quot;y&quot;, int &quot;threshold&quot;, bool &quot;use_chroma&quot;</var>)</p>
<p>Questo filtro può sovrapporre 2 clips di differenti dimensioni (ma con lo stesso 
  formato colore) usando diversi modi di operare.<br />
  PCome informazione sulla trasparenza dei pixel si usa come maschera il 4° canale 
  colore dell'RGB32 (A- o alpha-channel).</p>
<p><var>Base_clip</var>: è il clip di base che determina le dimensioni e tutte 
  le altre proprietà audio/video del risultato. <br>
  <var>Overlay_clip</var>: il clip che viene fuso nel precedente. Questo clip 
  pu&ograve; contenere un alpha layer.<br>
  <var>op</var>: l'operazione di merge , che può essere: "add", "subtract", "brighten", 
  "darken", "fast", "mul"<br>
  <var>level</var>: 0-255, la forza dell'operazione. 0: il base_clip rimane inalterato, 
  255: la forza massima che si deve usare<br>
  <var>x, y</var>: offset dell' overlay_clip<br>
  <var>threshold</var>: implementato solo per "lighten" e "darken"<br>
  <var>use_chroma</var>: usa il chroma dell' overlay_clip, default=true. Quando 
  vale "false" viene usato solo il luma. </p>
<p>Ci sono alcune differenze di comportamento e di parametri ammessi in funzione 
  del formato colore e dell' operazione. In dettagio:<br />
</p>
<dd> 
  <li>Nessuna maschera (alpha-channel) in YUY2, sicchè l'alpha-channel si assume 
    sia ovunque "opaco"</li>
  <li>in RGB32 l'alpha-channel dell'<var>overlay_clip</var> è moltiplicato per 
    il <var>level</var>, , di modo che l'alpha risultante = (alpha_mask * level) 
    / 256. Questo significa che per avere la massima potenza dell'operazione SIA 
    alpha CHE <var>level</var> devono essere 255.</li>
  <p>Questi operatori si comportano allo stesso modo sia in RGB32 che in YUY2:</p>
  <pre>&quot;fast&quot;: <i>u</i>se_chroma deve essere TRUE, level e threshold non sono usati. 
    Il risultato è semplicemente la media fra base_clip e overlay_clip.<i>
</i>&quot;add&quot;:  <i>t</i>threshold non è usato. La differenza fra base_clip e overlay_clip 
    è moltiplicata per alpha e sommata al base_clip.<br />    alpha=0 -> solo il  base_clip è visibile,<br />    alpha=128 -> base e overlay blended allo stesso modo,alpha=255 -> solo overlay è visibile.<i>
</i>&quot;subtract&quot;: identico ad add, ma l' overlay_clip viene prima invertito.</pre>
  <p>Questi operatori sembra lavorino correttamente solo in YUY2:</p>
  <pre>&quot;mul&quot;: <i>t</i>threshold non è usato. Il base_clip viene colorato come overlay_clip, 
    sicchè use_chroma dovrebbe essere TRUE.<br />    alpha=0 -> solo il base_clip è visibile, <br />    alpha=255 -> approx. la stessa Luminanza del Base ma con i colori di Overlay<i>
</i>&quot;lighten&quot;: <i>use_chroma</i> deve essere TRUE. Svolge le stesse operazioni di "add", ma i nuovi valori sono usati
	solo quando il risultato è PIU' LUMINOSO del base_clip. L'operazione è più adatta ad un threshold più alto 
	, di modo che con threshold=255 equivale ad "add", con threshold=0 il base_clip rimane inalterato
    , in funzione delle differenze tra base_clip e overlay_clip.
&quot;darken&quot;:  stesso discorso di "lighten", ma eseguito solo quando il risultato è PIU' SCURO del base_clip.</pre>
  <p><br>
    Vedere anche <a href="../syntax.htm#multiclip" target="_self">qui</a> per 
    le propriet&agrave; del clip.</p>
  <p>&nbsp; </p>
  <h2><a name="Mask"></a>Mask <em>[rgb32]</em></h2>
  <p><code>Mask </code>(<var>clip, mask_clip</var>)</p>
  <p>Applica una ben definita alpha-mask al <var>clip</var>, per l'uso con<code> 
    Layer</code>, convertendo mask_clip in greyscale e usandola quindi come mask 
    ( alpha-channel) dell' RGB32. In questo canale colore "black" significa completamente 
    transparente, "white" significa completamente opaco).</p>
  <p>&nbsp; </p>
  <h2><a name="ResetMask"></a>ResetMask <em>[rgb32]</em></h2>
  <p><code>ResetMask </code>(<var>clip</var>)</p>
  <p>Applica un alpha-mask &quot;all-opaque&quot; al <i>clip</i>, per l'uso con<code> 
    Layer</code>.<br>
  </p>
  <pre>L' alpha-channel di un clip RGB32-clip non è sempre ben definito (dipende dalla sorgente), questo filtro è il modo più rapido per applicare
	una maschera "all white":

clip=ResetMask(clip)</pre>
  <p>&nbsp;</p>
  <h2><a name="ColorKeyMask"></a>ColorKeyMask <em>[rgb32]</em></h2>
  <p><code>ColorKeyMask </code>(<var>clip, int color, int tolerance</var>)</p>
  <p>Imposta l'alpha-channel (in modo simile a quanto fà Mask) ma lo genera confrontando 
    il color. Ogni pixel con un colore che differisce meno della tolleranza è 
    impostato a "transparent", altrimenti non viene toccato (NON è che viene impostato 
    ad "opaco").</p>
  <p><kbd>$Date: 2004/09/29 21:58:56 $</kbd></p>
  <FORM>
    <INPUT TYPE="Button" VALUE="Indietro"
onClick="history.go(-1)">
  </form>
</body>
</html>
