<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <title> Avisynth Colorspace Conversion Filter</title>
   <link rel="stylesheet" type="text/css" href="../../avisynth.css">
</head>
<body>
<h2>
<a NAME="ConvertTo"></a>ConvertToRGB / ConvertToRGB24 / ConvertToRGB32<br>
  ConvertToYUY2 / ConvertBackToYUY2 / ConvertToYV12</h2>
<p><code>ConvertToRGB </code>(<var>clip [, string &quot;matrix&quot;], bool "interlaced"</var>)<br>
  <code>ConvertToRGB24 </code>(<var>clip [, string &quot;matrix&quot;], bool "interlaced"</var>)<br>
  <code>ConvertToRGB32 </code>(<var>clip [, string &quot;matrix&quot;], bool "interlaced"</var>)<br>
  <code>ConvertToYUY2 </code>(<var>clip, bool "interlaced"</var>)<br>
  <code>ConvertBackToYUY2 </code>(<var>clip, bool "interlaced"</var>)<br>
  <code>ConvertToYV12 </code>(<var>clip, bool "interlaced"</var>)
<p>AviSynth prima della v2.5 lavorava con 2 formati di colore, RGB e YUY2. A partire 
  dalla v2.5 AviSynth può lavorare con un terzo formato colore, YV12. Questi filtri 
  convertono fra loro questi formati. Se il video è già nel formato specificato 
  , non subirà cambiamenti. (si presuppone che RGB sia RGBA.) <code>ConvertToRGB</code> 
  converte in RGB32 a meno che il clip sia RGB24. Se per qualche ragione ci fosse 
  bisogno di RGB 24-bit, si usi in modo esplicito <code>ConvertToRGB24</code> 
  e <code>ConvertToRGB32</code> per fare il contrario. 
<p>La televisione Standard e quella ad alta definizione usano differenti routine 
  di conversione del colore. Se la sorgente &egrave; <u>high definition</u> e 
  si vuole <u>convertire da YUV a RGB</u> si deve usare 
<pre>ConvertToRGB(clip, &quot;rec709&quot;, true) o ConvertToRGB(clip, &quot;rec709&quot;, false) # in funzione del fatto che la sorgente sia interlacciata o progressiva</pre>
<p>in caso contrario
<pre>ConvertToRGB(clip, true) o ConvertToRGB(clip, false) # in funzione del fatto che la sorgente sia interlacciata o progressiva</pre>
<p>A partire dalla v2.51/v2.52 &egrave; stato aggiunto il parametro optionale 
  <var>interlaced</var> (<var>interlaced</var><i>=</i><code>false</code> &egrave; 
  il default). Quando impostato a false si assume che il <var>clip</var> sia progressivo, 
  quando impostato a true si assume che il <var>clip</var> sia interlacciato. 
  Questa optione &egrave; stata aggiuta in quanto (assumendo che il clip sia interlacciato 
  YV12): 
<pre>SeparateFields(clip)
ConvertToYV12
Weave</pre>
&egrave; campionato in modo errato. Al suo posto &egrave; meglio usare: 
<pre>ConvertToYV12(clip, interlaced=true)</pre>
Tutti i filtri di VirtualDub (caricati con <code>LoadVirtualdubPlugin</code>, 
vedere <a href="../syntax.htm#Plugins">Plugins</a>) supportano SOLO input RGB32. 
<p><b>RGB24, RGB32:</b> I colori sono memorizzati come valori di red, green e 
  blue. In RGB32 c'&egrave; un canale extra &quot;Alpha&quot; per l'opacity. Le 
  dimensioni delle immagini possono assumere qualsiasi valore. 
<p><b>YUY2:</b> L'immagine &egrave; memorizzata come un valore Y del luma e 2 
  valori di colore U, V. Per 2 pixels orizzontali ci sono un solo valore di chroma 
  e due valori di luma (2 Y, 1 U, 1 V). Per questa ragione la larghezza deve essere 
  multipla di 2. 
<p><b>YV12:</b> Stessa cosa di YUY2 ma c'&egrave; un solo valore di chroma per 
  4 pixels (un quadrato 2x2). Entrambe le dimensioni dell'immagine devono essere 
  multiple di 2, se il video &egrave; interlacciato l'altezza deve essere un multiplo 
  di 4 perch&egrave; il quadrato 2x2 &egrave; preso da un field, non da un frame. 
<p>Alcune funzioni testano le regole di dimensionamento, alcune arrotondano i 
  parametri, ce ne sono altre che generano una distorsione dell'immagine o un 
  errore.
<p>Lavorare in YUY2 &egrave; pi&ugrave; veloce che in RGB. YV12 &egrave; perfino 
  pi&ugrave; veloce ed&egrave; il formato nativo MPEG, sicch&egrave; vi sono meno 
  conversioni di colorspace. 
<p>La conversione avanti e indietro <b>non è senza perdite</b> , sicchè si facciano 
  meno conversioni possibile. Se fossero necessarie conversioni multiple , si 
  usi <code>ConvertBackToYUY2</code> per ritornare in YUY2, se il sorgente originario 
  era YUY2. Questo ridurrà il colorblurring, ma ci sarà comunque una perdita di 
  precisione. 
<p>In molti casi, il filtro <code>ConvertToRGB</code> non dovrebbe essere necessario. 
  Se l'output di AviSynth è in formato YUY2 ed una applicazione si aspetta RGB, 
  il sistema userà per fare la conversione il codec YUY2 installato. Tuttavia, 
  se non c'è un codec YUY2 installato o se (come nel caso del codec ATI YUY2) 
  il codec converte da YUY2 in RGB in modo sbagliato, si possono usare al posto 
  suo i filtri built-in in Avisynth. 
<p><a href="http://www.math.berkeley.edu/~benrg/huffyuv.html" target="_parent">Huffyuv</a> 
  opera come se fosse il solo codec YUY2 installato, sicchè se si installa Huffyuv 
  <i>e si disinstallano tutti gli altri codec YUY2</i>, non c'è più bisogno di 
  <code>ConvertToRGB</code>. 
<p><code>ConvertToRGB24</code> e <code>ConvertToRGB32</code> possono essere usati 
  per costringere AviSynth ad usare un modo specifico per memorizzare dati RGB 
  . RGB24 &egrave; spesso molto pi&ugrave; lento di RGB32, sicch&egrave; se la 
  sorgente &egrave; RGB24, si pu&ograve; guadagnare in velocit&agrave; convertendo 
  in RGB32. Non ci sono vantaggi ad usare RGB24 eccezion fatta per TMPGEnc e VFApi 
  che richiedono input RGB24). <br>
  &nbsp;
<br>
<pre># C'è una leggera distorsione causata dalla conversione tra YUY2 e RGB.
# Vediamo se possiamo trovarla.
control = ConvertToYUY2()
test = ConvertToYUY2(ConvertToRGB(ConvertToYUY2(ConvertToRGB(control))))
test = ConvertToYUY2(ConvertToRGB(test))
return Subtract(test,control)</pre>
<p><kbd>$Date: 2004/09/26 19:49:40 $</kbd></p>
<form>
  <input TYPE="Button" VALUE="Indietro"
onClick="history.go(-1)">
</form>
</body>
</html>
