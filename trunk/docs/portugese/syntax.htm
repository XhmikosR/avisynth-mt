<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
<!--
Automatically generated, don't change:
$Id: syntax.htm,v 1.1 2006/03/26 18:11:19 wilbertd Exp $ 
-->
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>AviSynth 2 - Basic Syntax</title>
<link rel="stylesheet" type="text/css" href="../avisynth.css">
</head>
<body>
<h2><a NAME="Gettingstarted"></a>Começando</h2>
<p><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA"><font size="2" face="MS Sans Serif">Basicamente,
AviSynth trabalha assim: Primeiro, você cria um documento de texto simples com
comandos especiais, chamados <b>scripts</b>  (escritos). Estes comandos fazem
referências a um ou mais vídeos e os filtros que você deseja rodar neles. Então,
você roda uma aplicação de vídeo, como o VirtualDub e abre o arquivo do
escrito. Aqui é quando AviSynth entra em ação. Abre os vídeos que você
referenciou no escrito, roda os filtros especificados e alimenta a produção
para a aplicação de vídeo. Porém, a aplicação não está ciente que
AviSynth está trabalhando no fundo. Ao invés, a aplicação pensa que está
abrindo diretamente um arquivo de AVI filtrado que reside em seu disco rígido.</font></span> 
<p><font face="Microsoft Sans Serif" size="2"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Há
muita coisa nova e funcionalidade redescoberta em AviSynth2. Para fazer esses
itens claramente visíveis (especialmente quando a característica não foi bem
documentada no passado) eles são marcados com</span> </font> <strong>v2</strong> 
<p><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA"><font face="Microsoft Sans Serif" size="2">A
versão 2.5 é uma versão interna principal aperfeiçoada. Leia <a href="twopointfive.htm" target="main">AviSynth
2.5</a> cuidadosamente antes de usar. Mudanças pertinentes são marcadas com</font></span> <strong>v2.5</strong>
<p style="margin-top: 0; margin-bottom: 0">&nbsp;
<h4>Edição Linear:</h4> 
<p><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA"><font face="Microsoft Sans Serif" size="2">A
coisa mais simples que você pode fazer com AviSynth é o tipo de edição que pode
ser feito no VirtualDub. Os escritos para isto são fáceis de escrever
porque não há com que se preocupar sobre variáveis e expressões
complicadas, se não quiser.</font></span> 
<p><span style="font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:&quot;Microsoft Sans Serif&quot;;mso-fareast-font-family:&quot;Times New Roman&quot;;
mso-ansi-language:PT-BR;mso-fareast-language:PT-BR;mso-bidi-language:AR-SA">Para
testar crie um arquivo de nome test.avs e ponha uma linha com o seguinte texto:</span>
<pre>Version</pre>
<p><font face="Microsoft Sans Serif" size="2"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Agora
abra este arquivo com o Windows Mídia Player, por exemplo e você deverá ver
um clipe de vídeo de dez segundos mostrando o número da versão do AviSynth e
uma notificação de protegido por direitos autorais.</span></font> 
<p><code>Version</code>  <font face="Microsoft Sans Serif" size="2"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">é
um filtro de fonte, significando que gera um clipe em vez de modificá-lo. O
primeiro comando em um escrito de AviSynth será sempre um filtro de fonte</span>.</font> 
<p><font face="Microsoft Sans Serif" size="2"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Agora
acrescente uma segunda linha ao arquivo do escrito, de forma a ler assim:</span></font> <br>
  &nbsp; 
<pre>Version
ReduceBy2&nbsp;</pre>
<p><font face="Microsoft Sans Serif" size="2"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Você
deverá ver o aviso de protegido por direitos autorais novamente, mas agora com
a metade do tamanho de antes.</span></font> <br>
  <code><a href="corefilters/reduceby2.htm">ReduceBy2</a></code>  <span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA"><font face="Microsoft Sans Serif" size="2">é
um “filtro de transformação” significando que pega o clipe e o modifica de
algum modo. Você pode encadear muitos filtros de transformação, como no
VirtualDub.<br>
Vamos pôr um outro para fazer o vídeo desvanecer ao preto no fim. Acrescente
outra linha ao arquivo do escrito desta forma:</font></span> 
<pre>Version
ReduceBy2
FadeOut(10)</pre>
<p><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Agora
reabra o arquivo. O clipe deverá ser o mesmo durante os primeiros 9 segundos e
no último segundo que deverá desvanecer suavemente ao preto.</span></font> <br>
O filtro <a href="corefilters/fade.htm">FadeOut</a>  <font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">recebe
um argumento numérico que indica o número de quadros para desvanecer.</span></font> 
<p><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Leva
um tempo antes que o desvanecer comece, assim, aparemos o começo do clipe
para reduzir a espera e diminuir depois disso.<br>
Descartemos os primeiros 120 deles e mantenhamos os quadros 120-150:</span></font> <br>
  &nbsp; 
<pre>Version
ReduceBy2
Trim(120,150) # <font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">corte fora os primeiros 119 quadros e mantenha os quadros 120-150 (AviSynth começa numerando os quadros de 0)</span></font>FadeOut(10)</pre>
<p style="margin-top: 0; margin-bottom: 0"><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Neste
exemplo usamos um comentário pela primeira vez.</span></font> <br>
Os <span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA"><font size="2" face="Microsoft Sans Serif">comentários
começam com o caractere # e continuam até o fim da linha e são completamente ignorados por AviSynth.</font></span>
<p style="margin-top: 0; margin-bottom: 0">O filtro <a href="corefilters/trim.htm">Trim</a> 
<font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">recebe
dois argumentos, separados por uma vírgula: o primeiro e o último quadro para
manter o do clipe. Se você pôs 0 para o último quadro, é igual ao fim do
clipe, assim se quer remover só os primeiros 119 quadros, deve usar
Trim(120,0).</span></font> 
<p><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Ficar
atento ao número de quadros é uma obrigação. É muito mais fácil abrir um
escrito parcialmente completo em uma aplicação como o VirtualDub, que exibirá
o número de quadro. Você também pode usar o</span></font> filtro <a href="corefilters/showframes.htm">ShowFrameNumber</a>,
<font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">que
imprime o número de cada quadro em si mesmo</span></font> 
<p><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Na
prática, um filtro de fonte muito mais útil que <a href="corefilters/version.htm">Version</a>
é o <a href="corefilters/avisource.htm">AVISource</a>
que lê num arquivo AVI (ou um de vários outros tipos de arquivos) do disco. Se
você tiver um AVI à mão, pode tentar aplicando estes mesmos filtros a seu
arquivo:</span></font> <br>
  &nbsp; 
<pre>AVISource(&quot;d:\capture.avi&quot;)&nbsp;&nbsp; # <font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">ou qualquer outro nome de caminho atual</span></font>
ReduceBy2
FadeOut(15)
Trim(120,0)</pre>
<p><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Até
mesmo um escrito de uma linha que contém só o comando AVISource pode ser útil
para dar suporte a arquivos AVI &gt;2GB em aplicações que só suportam &lt;
2GB.</span></font> <br>
<hr>
<h4>Edição Não Linear:</h4> 
<p><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Vamos à parte divertida. Faça um arquivo AVS com
este escrito:</span></font> 
<pre>StackVertical(Version, Version)</pre>
<p><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Agora
abra-o. Resultado: Um vídeo com duas linhas idênticas de informação da versão,
um em cima do outro.</span></font> <br>
<font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Em
vez de ter números ou <i><font color="#800000">strings</font></i> como
argumentos, <a href="corefilters/stack.htm">StackVertical</a>
pega clipes de vídeo como argumentos. Neste escrito, o filtro <font color="#800000"><i>Version</i>
</font>está sendo chamado duas vezes. A cada vez, retorna uma cópia da versão
do clipe. Estes dois clipes são passados então a <font color="#800000"><i>StackVertical</i>
</font>que os une (sem saber de onde vieram).</span></font> 
<p><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Um
dos filtros mais úteis deste tipo é <a href="corefilters/splice.htm">UnalignedSplice</a>
que une os clipes de vídeo. Aqui um escrito que carrega três arquivos AVI
(como poderia ser produzido por AVI_IO) e os concatena juntos.</span></font> 
<pre>UnalignedSplice(AVISource(&quot;d:\capture.00.avi&quot;), AVISource(&quot;d:\capture.01.avi&quot;), AVISource(&quot;d:\capture.02.avi&quot;))</pre>
<p style="margin-top: 0; margin-bottom: 0"><font face="Microsoft Sans Serif"><a href="corefilters/stack.htm"><font size="2"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">StackVertical</span></font></a><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA"><font size="2">
e <a href="corefilters/splice.htm">UnalignedSplice</a> tanto
podem ter dois argumentos como sessenta.<br>
Você pode usar o operador + como uma taquigrafia para UnalignedSplice.</font></span></font> 
<p style="margin-top: 0; margin-bottom: 0">&nbsp; 
<p style="margin-top: 0; margin-bottom: 0"><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Por
exemplo, este escrito faz a mesma coisa que o exemplo anterior:</span></font> 
<pre>AVISource(&quot;d:\capture.00.avi&quot;) + AVISource(&quot;d:\capture.01.avi&quot;) + AVISource(&quot;d:\capture.02.avi&quot;)</pre>
<p><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Agora
vamos supor que você está capturando com uma aplicação que também salva o vídeo
em múltiplos segmentos AVI, mas põe o áudio em um arquivo WAV separado.<br>
Podemos combinar tudo? Você apostou:</span></font></p>
<pre>AudioDub(AVISource(&quot;d:\capture.00.avi&quot;)+AVISource(&quot;d:\capture.01.avi&quot;)+AVISource(&quot;d:\capture.02.avi&quot;), WAVSource(&quot;d:\audio.wav&quot;))</pre>
<hr>
<h2><a NAME="Syntax"></a>Sintaxe </h2>
<h4>Expressões:</h4> 
<p>Um script AviSynth consiste de muitas linhas de declarações como esta: 
  &nbsp; 
<pre>variable_name = expression</pre>
<p>Neste exemplo <font color="#800000"> expression</font> é avaliada e o resultado
é atribuído à variable_name. 
<p>Muito importante é a forma de atalho comum : 
<pre>expression</pre>
<p>Neste caso, <font color="#800000"> expression</font> é avaliada e o resultado
é atribuído à variável especial <var>last </var>do clipe. <br>
E é o mesmo que: 
<pre>last = expression</pre>
<p>O fim do escrito sempre se parece com: 
<pre>return expression</pre>
<p>Aqui <font color="#800000">expression</font> é avaliada e usada como<font color="#800000">
<i>return value</i></font>, valor de retôrno do escrito - quer dizer, o clipe
de vídeo será visto pela aplicação que abre o arquivo AVS.</p>
<font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">A
forma básica de uma expressão que invoca uma função é</span></font> 
<pre>Function(args)</pre>
<p><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">As
funções <font color="#800000">Clip</font> sempre produzem um novo clipe de vídeo
e nunca modificam o existente, <font color="#800000">Args</font> é uma lista de
argumentos de função separada por vírgulas. A lista pode estar vazia
(significa que tudo ou alguns argumentos podem ser opcionais)</span></font> 
<p><font size="2"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA"><font face="Microsoft Sans Serif">Se
a função do filtro espera um clipe de vídeo como seu primeiro argumento e ele
não é fornecido, então o clipe na variável especial </font></span></font><var><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA"><font face="Microsoft Sans Serif" size="2">last</font></span></var><p><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">O
</span></font><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">filtro
do </span></font><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">AviSynth pode ter argumentos nomeados. Eles podem ser especificados em qualquer
ordem e escolherá valores padrões para os que você não o fez
(argumentos nomeados são sempre opcionais).<br>
Isto faz certos filtros muito mais fácil de usar.</span></font><pre>Você pode escrever:

Subtitle(&quot;Alô, Mundo!&quot;, text_color=$00FF00, x=100, y=200)

em vez de

Subtitle(&quot;Alô, Mundo!&quot;, 100, 200, 0, 999999, &quot;Arial&quot;, 24, $00FF00)</pre>
<p>Uma sintaxe alternada&nbsp; (chamada "OOP notation") para funções de <font color="#800000">clip</font>
é<pre>expression.Function(args)

exemplo:
Version.ReduceBy2.FadeOut(15)</pre>
<p>E é equivalente a 
<pre>Function(expression, args)

exemplo:
FadeOut(15, ReduceBy2(Version))</pre>
<p>e pode ser lembrado que <code>Function</code>  é aplicado a <code>expression</code>. <br>
<font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Uma
desvantagem da notação OOP é que só pode ser usada com filtros que tenham um
só argumento de clipe de vídeo, não com filtros que tenham vários.</span></font> 
<p><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Todas
as funções AviSynth produzem número de quadros e taxas definidos, até
mesmo se a declaração parecer muito complexa.</span> <br>
<span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">AviSynth
sabe depois de ter lido o escrito qual será o tamanho do arquivo, quais taxas
de quadro tem e a sucessão de cortes de todas as entradas usadas.</span> <br>
<span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Isto tudo
é calculado ao abrir o escrito. Só o filtro atual é executado em tempo
real na solicitação.</span></font> <br>
<hr>
<p><b>Comentários</b>: AviSynth ignora tudo após um caractere # até o fim dessa
linha. 
<p><b>Ignorar Caso</b>: aViSouRCe é tão bom quanto AVISource.<p><b>Continue</b>
à próxima ou da linha anterior: \ 
 
<pre>Subtitle (&quot;Test-Text&quot;)

Subtitle ( \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Test-Text&quot;)

Subtitle (&nbsp;
       \ &quot;Test-Text&quot;)</pre>
<p> 
<hr>
<h4>Variáveis:</h4> 
<p><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Um
nome variável pode ter até 50 caracteres e conter letras, dígitos, e
sublinhes (_), mas nenhum outro caractere. O nome não pode começar com um dígito.</span></font> 
<p><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Podem
ser usados os seguintes tipos de variáveis:</span></font> 
<p><font size="2" face="Microsoft Sans Serif"><var><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">clip</span><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA; font-style: normal">:
<font color="#000000">um clipe de vídeo que contém vídeo e / ou áudio.</font>
</span></var><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Pelo
menos uma variável deve ser usada para um clipe e deve ser retornada pelo
escrito.</span> <br>
  <var>string</var>: <span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">cercado
por aspas ou por 3 aspas como &quot;&quot;&quot;este exemplo&quot;&quot;&quot;.
Uma string de texto pode conter qualquer caractere menos as aspas ou apóstrofe
duplo. Se você precisar pôr aspas na frase, use a notação tripla:</span></font>
<pre>Subtitle (&quot;&quot;&quot;Isto exibe &quot;alô mundo&quot; com aspas&quot;&quot;&quot;)</pre>
<p><var>int:</var>  entrado como uma string de dígitos, opcionalmente com um +
ou - no início. <br>
  <var>float:</var>  entrado como uma string de dígitos com um ponto (.) em
algum lugar e opcionalmente com um + ou -. Por exemplo, +1. é tratado como um
número de ponto flutuante. <br>
  <var>val:</var> <font size="2" face="Microsoft Sans Serif"> <span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">como
tipo de um argumento de função onde não importa se é <font color="#800000">int</font>
ou flutuante</span></font> <br>
  <var>bool</var>: pode ser TRUE ou FALSE <br>
  <var>hexadecimal numbers</var>: entrado precedendo um $. Esta variável é
tratada como inteiro. Vários filtros usam esta notação para especificar cores.
Por exemplo, $FF8800 é uma sombra laranja.<p><var>global</var>: define uma variável
global, que pode ser usada por todas as funções definidas pelo usuário e no script
principal em comum.<p>Aqui outra versão do exemplo acima, mais controlável e
fácil de entender: 
<pre>a = AVISource(&quot;d:\capture.00.avi&quot;)
b = AVISource(&quot;d:\capture.01.avi&quot;)
c = AVISource(&quot;d:\capture.02.avi&quot;)
sound_track = WAVSource(&quot;d:\audio.wav&quot;)

AudioDub(a+b+c, sound_track)</pre>
<p> 
<hr>
<h2><a NAME="Operators"></a>Operadores </h2>
<p>Para todos os tipos de operandos (clip, int, float, string, bool) você pode
usar: <br>
  <code>==</code> is equal <br>
  <code>!=</code> not equal <br>
  <code>||</code> or <br>
  <code>&amp;&amp;</code> and<p>Para tipos numéricos (int, flut): <br>
  <code>+ </code>somar <br>
  <code>- </code>subtrair <br>
  <code>* </code>multiplicar <br>
  <code>/ </code>dividir <br>
  <code>% </code>mod <br>
  <code>>=</code> maior ou igual a <br>
  <code>&lt;=</code> menor ou igual a <br>
  <code>&lt; </code>menor que <br>
  <code>> </code>maior que </p>
<pre><font face="Microsoft Sans Serif" size="2"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">AviSynth em versões anteriores analisou expressões da direita para a esquerda que deu&nbsp;resultados inesperados:</span></font> 

 a = 10 - 5 - 5 resultou 10 - (5 - 5) = 10 em vez de (10 - 5) - 5 = 0 !
 
<font size="2" face="Microsoft Sans Serif">Este <font color="#800000">bug</font> foi corrigido!</font>
<font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Também a partir de v2.53 a multiplicação e a divisão são analisadas da esquerda para a direita (em vez de direita para a esquerda).</span></font> </pre>
<p>Para o tipo string: <br>
  <code>+ </code>somar <br>
  <code>>=</code>  maior ou igual a (insensitivo ao caso) <br>
  <code>&lt;=</code> menor ou igual a (insensitivo ao caso) <br>
  <code>&lt; </code>menor que (insensitivo ao caso) <br>
  <code>> </code>maior que&nbsp; (insensitivo ao caso) 
<p>Para o tipo clip: <br>
  <code>+ </code>o mesmo que a função <code>UnalignedSplice</code> <br>
  <code>++</code>
  <code></code>o mesmo que a função <code>AlignedSplice</code> 
<p>Para o tipo bool: <br>
  <code>?:</code>  executa código condicionalmente <br>
  &nbsp; 
<pre>b = (a==true) ? 1 : 2

Isto significa em pseudo-basic:

if (a=true) then b=1 else b=2&nbsp;</pre>
<p> 
<hr>
<h2><a NAME="ScriptFunctions"></a>Funções de Script&nbsp; </h2>
<p><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA"><font size="2" face="Microsoft Sans Serif">A
entrada e saída destas funções não são clipes, mas algumas outras variáveis
usadas no escrito.</font></span> 
<p>
<h4>Funções Numéricas:</h4>
<table BORDER WIDTH="75%" >
  <tr> 
    <td WIDTH="62%"><code>Floor(<var>float</var>)</code>: converte de flutuante
      a inteiro</td>
    <td WIDTH="40%"><code>Floor</code> (1.2) = 1<br>
      <code>Floor</code> (1.6) = 1<br>
      <code>Floor</code> (-1.2) = -2<br>
      <code>Floor</code> (-1.6) = -2</td>
  </tr>
  <tr> 
    <td WIDTH="62%"><code>Ceil</code> (<var>float</var>): converte de flutuante
      a inteiro</td>
    <td WIDTH="40%"><code>Ceil</code> (1.2) = 2.0<br>
      <code>Ceil</code> (1.6) = 2.0<br>
      <code>Ceil</code> (-1.2) = -1br>
      <code>Ceil</code> (-1.6) = -1</td>
  </tr>
  <tr> 
    <td WIDTH="62%"><code>Round</code> (<var>float</var>): converte de flutuante
      a inteiro</td>
    <td WIDTH="40%"><code>Round</code> (1.2) = 1<br>
      <code>Round</code> (1.6) = 2<br>
      <code>Round</code> (-1.2) = -1<br>
      <code>Round</code> (-1.6) = -2</td>
  </tr>
  <tr> 
    <td WIDTH="62%"><code>Int</code> (<var>float</var>): converte um flutuante a inteiro
      (arredonda para zero).</td>
    <td WIDTH="40%"><code>Int</code> (1.2) = 1<br>
      <code>Int</code> (1.6) = 1<br>
      <code>Int</code> (-1.2) = -1<br>
      <code>Int</code> (-1.6) = -1</td>
  </tr>
  <tr> 
    <td WIDTH="62%"><code>Float</code> (<var>int</var>): converte um inteiro a
      flutuante .</td>
    <td WIDTH="40%"></td>
  </tr>
  <tr> 
    <td WIDTH="62%"><code>Frac</code> (<var>float</var>): retorna a fração do
      flutuante .</td>
    <td WIDTH="40%"><code>Frac</code> (3.7) = 0.7<br>
      <code>Frac</code> (-1.8) = -0.8</td>
  </tr>
  <tr> 
    <td WIDTH="62%" HEIGHT="4"><code>Abs</code> (<var>integer</var>) / <code>Abs</code> 
      (<var>float</var>): valor absoluto para inteiro e flutuante.</td>
    <td WIDTH="40%" HEIGHT="4"><code>Abs</code> (-3.8) = 1.8</td>
  </tr>
  <tr> 
    <td WIDTH="62%"><code>Sign</code> (<var>int</var>) / <code>Sign</code> (<var>float</var>):
      retorna o sinal do número como -1, 0 ou 1.</td>
    <td WIDTH="40%"><code>Sign</code>(-3.5) = -1<br>
      <code>Sign</code>(3.5) = 1<br>
      <code>Sign</code>(0) = 0</td>
  </tr>
  <tr> 
    <td WIDTH="62%" HEIGHT="24"><code>HexValue</code> (<var>string</var>) Retorna
      o valor de uma string hexadecimal&nbsp;</td>
    <td WIDTH="40%" HEIGHT="24"><code>HexValue</code> ("FF00") = 65280</td>
  </tr>
  <tr> 
    <td COLSPAN="2"></td>
  </tr>
  <tr> 
    <td WIDTH="62%"><code>Sin</code> (<var>float</var>)</td>
    <td WIDTH="40%"></td>
  </tr>
  <tr> 
    <td WIDTH="62%"><code>Cos</code> (<var>float</var>)</td>
    <td WIDTH="40%"></td>
  </tr>
  <tr> 
    <td WIDTH="62%"><code>Pi</code> ()<b><font color="#FFFF66"></font></b></td>
    <td WIDTH="40%"></td>
  </tr>
  <tr> 
    <td WIDTH="62%"><code>Log</code> (<var>float</var>)</td>
    <td WIDTH="40%"></td>
  </tr>
  <tr> 
    <td WIDTH="62%"><code>Exp</code> (<var>float</var>)</td>
    <td WIDTH="40%"></td>
  </tr>
  <tr> 
    <td WIDTH="62%" HEIGHT="24"><code>Pow</code> (<var>float base, float power</var>)</td>
    <td WIDTH="40%" HEIGHT="24"></td>
  </tr>
  <tr> 
    <td WIDTH="62%"><code>Sqrt</code> (<var>float</var>}</td>
    <td WIDTH="40%"></td>
  </tr>
  <tr> 
    <td COLSPAN="2"></td>
  </tr>
  <tr> 
    <td WIDTH="62%"><code>Rand</code>(<var>[int max] [, bool scale] [, bool seed]</var>):
      retorna aleatório inteiro entre 0 e max.<br>
      &nbsp; padrões: max = 32768 <br>
      &nbsp; scale = TRUE ( TRUE = modo normal, FALSE = modo modulus) <br>
      &nbsp; seed = FALSE (TRUE = usar tempo como semente)</td>
    <td WIDTH="40%"><code>Rand</code>(100) = número inteiro entre 0 e 99</td>
  </tr>
  <tr> 
    <td WIDTH="62%"><code>Spline</code> (<var>float X,&nbsp; x1,y1, x2,y2, ...., 
      bool "cubic"</var>}<strong> v2.5</strong> <br>
      &nbsp;Interpola o valor Y ao ponto X com pontos de controle&nbsp; x1/y1,... 
      <br>
      &nbsp;Deve ter ao menos 2 pares de x/y. <br>
      &nbsp;A interpolação pode ser cúbica (o resultado é uma ranhura) ou linear
      (o resultado é um polígono)</td>
    <td WIDTH="40%"><code>Spline</code> (5, 0,0, 10,10, 20,0, false) = 5<br>
      <code>Spline</code> (5, 0,0, 10,10, 20,0, true) = 7</td>
  </tr>
</table>
<h4>Funções de String:</h4>
<table BORDER WIDTH="80%" >
  <tr> 
    <td WIDTH="53%"><code>UCase</code> (<var>string</var>): retorna a string em
      maiúsculas</td>
    <td WIDTH="60%"><code>UCase</code> ("AviSynth") = "AVISYNTH"</td>
  </tr>
  <tr> 
    <td WIDTH="53%"><code>LCase</code> (<var>string</var>): retorna a string em
      minúsculas</td>
    <td WIDTH="60%"><code>LCase</code> ("AviSynth") = "avisynth"</td>
  </tr>
  <tr> 
    <td WIDTH="53%"><code>RevStr</code> (<var>string</var>): retorna a string
      invertida&nbsp;</td>
    <td WIDTH="60%"><code>RevStr</code> ("AviSynth") = "htnySivA"</td>
  </tr>
  <tr> 
    <td WIDTH="53%"><code>StrLen</code> (<var>string</var>): retorna o comprimento
      da string</td>
    <td WIDTH="60%"><code>StrLen</code> ("AviSynth") = 8</td>
  </tr>
  <tr> 
    <td WIDTH="53%"><code>Findstr</code> (<var>string1, string2</var>):<br>
      retorna o offset da string2 dentro da string1. A pesquisa é sensitiva ao caso.</td>
    <td WIDTH="60%"><code>Findstr</code> ("AviSynth","syn") = 4</td>
  </tr>
  <tr> 
    <td WIDTH="53%"><code>LeftStr</code> (<var>string, length</var>) / <code>RightStr</code> 
      (<var>string, length</var>):<br>
      retorna a porção esquerda ou direita da string especificada pelo comprimento</td>
    <td WIDTH="60%"><code>LeftStr</code> ("AviSynth",3) = "Avi"</td>
  </tr>
  <tr> 
    <td WIDTH="53%"><code>MidStr</code> (<var>string, start [, length]</var>):<br>
      retorna a porção da string desde o início (para o primeiro caractere start=1)
      para o número de caracteres especificados pelo comprimento ou ao fim.</td>
    <td WIDTH="60%"><code>MidStr</code> ("AviSynth",3,2) = "iS"</td>
  </tr>
  <tr> 
    <td WIDTH="53%"><code>VersionNumber</code> ()</td>
    <td WIDTH="60%"><code>VersionNumber</code> () = 2.07</td>
  </tr>
  <tr> 
    <td WIDTH="53%"><code>VersionString</code> ()</td>
    <td WIDTH="60%"><code>VersionString</code> () = "AviSynth 2.08 (avisynth.org) 
      22 nov. 2002"</td>
  </tr>
  <tr> 
    <td WIDTH="53%"><code>Chr</code> (<var>int</var>): retorna o caractere ASCII 
      <strong>v2.5</strong></td>
    <td WIDTH="60%"><code>Chr</code> (34) retorna o caractere aspas&nbsp;</td>
  </tr>
  <tr> 
    <td WIDTH="53%"><code>Time</code> (<var>string</var>): retorna uma string
      com a hora atual do sistema formatada como definida pela string <strong>v2.5</strong></td>
    <td WIDTH="60%">Códigos para formatação de saída&nbsp; <br>
      %a Nome do dia da semana abreviado <br>
      %A Nome do dia da semana completo <br>
      %b Nome do mês abreviado <br>
      %B Nome do mês completo <br>
      %c Data e hora - representação apropriada para local <br>
      %d Dia do mês em número decimal (01 – 31) <br>
      %H Hora no formato 24 horas (00 – 23) <br>
      %I Hora no formato 12 horas (01 – 12) <br>
      %j Dia do ano em número decimal (001 – 366) <br>
      %m Mês em número decimal&nbsp; (01 – 12) <br>
      %M Minuto em número decimal (00 – 59) <br>
      %p Atual local‚s A.M./P.M. indicador para 12 horas <br>
      %S Segundo em número decimal&nbsp; (00 – 59) <br>
      %U Semana do ano em número decimal, com Domingo o primeiro dia (00 
      – 53) <br>
      %w Dia de semana em número decimal (0 – 6; Domingo é 0) <br>
      %W Semana do ano em número decimal, com Domingo o primeiro dia (00 
      – 53) <br>
      %x representação apropriada para local <br>
      %X Hora, representação para local atual <br>
      %y Ano sem século, em número decimal (00 – 99) <br>
      %Y Ano com século, em número decimal&nbsp; <br>
      %z, %Z Fuso Horário, nome ou abreviação; nenhum caractere se o fuso é
      desconhecido 
      <br>
      %% Percentual<p>O sinalizador # pode prefixar qualquer código de formatação.
      Neste caso, o significado do formato do código é mudado como a seguir:<p>%#a, %#A, %#b, %#B, %#p, %#X, %#z, %#Z, %#%
      O sinalizador # é ignorado.&nbsp; 
        <br>
        %#c Data e hora completa, apropriada para local atual. Por exemplo: “Terça
      feira, Março 14, 1995, 12:41:29„.&nbsp; <br>
        %#x Data completa, apropriada para local atual. Por exemplo: 
        “Terça feira, Março 14, 1995„.&nbsp; <br>
        %#d, %#H, %#I, %#j, %#m, %#M, %#S, %#U, %#w, %#W, %#y, %#Y Remove 
        zeros iniciais (se houver).
    </td>
  </tr>
</table>
<p>
<h4>Conversões:</h4>
<table BORDER WIDTH="75%" >
  <tr> 
    <td width="50%"><code>Value</code> (<var>string</var>): Retorna o valor de
      uma string.</td>
    <td WIDTH="50%"><code>Value</code> ( "-2.7" ) = 2.7</td>
  </tr>
  <tr> 
    <td width="50%"><code>String</code> (<var>float / int / string, format_string</var>):
      converte número em string.<br>
      <p>Se a variável é flut. ou inteira,&nbsp; converte-a para flut e usa format_string
      para convertê-la em string.</p>
      <p>A sintaxe de format_string é como a seguir:</p>
      <p>%[flags][width][.precision]f<br>
  width: a mínima largura (a string nunca é truncada)<br>
  precision: o número de dígitos impressos<br>
      Sinalizadores:<br>
  <tt>&nbsp;-&nbsp;&nbsp;&nbsp;</tt>alinha à esquerda (em vez de à direita)<br>
  <tt>&nbsp;+&nbsp;&nbsp;&nbsp;</tt>imprime sempre o sinal +/-&nbsp;<br>
  <tt>&nbsp;0&nbsp;&nbsp;&nbsp;</tt>enche o início com zeros<br>
  <tt>&nbsp;'&nbsp;'&nbsp;</tt>imprime em branco em vez de &quot;+&quot;<br>
  <tt>&nbsp;#&nbsp;&nbsp;&nbsp;</tt>sempre imprime o ponto decimal&nbsp;</p>
    </td>
    <td WIDTH="50%">e.g. <code>Subtitle</code>  (&quot;a altura do Clip é " + <code>String</code> 
      (last.height) )<br>
      <br>
      <code>String</code>(1.23, &quot;%f&quot;) =      '1.23'<br>
      <code>String</code>(1.23, &quot;%5.1f&quot;) =   '  1.2'<br>
      <code>String</code>(1.23, &quot;%1.3f&quot;)  = '1.230'
    </td>
  </tr>
</table>
<p><h4>Funções de Teste:</h4> 
<p><code>IsBool(<var>var</var>) </code><br>
  <code>IsInt(<var>var</var>) </code><br>
  <code>IsFloat(<var>var</var>) </code><br>
  <code>IsString(<var>var</var>) </code><br>
  <code>IsClip(<var>var</var>) </code>
<p>
<h4>Outras funções:</h4> 
<p><code>Select</code> (<var>index, item0 [, item1...]</var>): Retorna o item
selecionado pelo índice (0=item0). Os itens podem ser qualquer variável ou clipe
e também podem ser mistos .<br>
  <code>Defined</code> (<var>var</var>): <span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA"><font size="2">para
definir parâmetros opcionais em funções definidas pelo usuário.</font></span> <br>
  <code>Default</code> (<var>x, d</var>): retorna x se Defined(x), d caso
contrário. 
  <br>
  <code>Exist</code> (<var>filename</var>): retorna TRUE ou FALSE depois de checar
se o arquivo existe.<br>
  <code>NOP</code> (): retorna NULL, <font size="2"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">provido
principalmente para execução condicional com itens de valor sem retôrno como
importação e nenhum outro além da condição desejada.</span></font><br>
  <code>Eval</code> (<var>string</var>),<br>
  <code>Apply</code> (<var>func-string, arg,...</var>): <code>Eval</code> ("f(x)")
é equivalente a <code>f(x)</code> é equivalente a <code>Apply</code> ("f", 
  x)
<pre>Você pode usar Eval para algo como:
settings = &quot;352, 288&quot;
Eval( &quot;BicubicResize(&quot; + ajustes + &quot;)&quot; )</pre>
<p><code>Import</code>(<var>filename</var>):<font size="2"> <span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">conteúdos
de evals de outro escrito de avisynth (importa o texto de outro escrito)</span></font> 
<p><font size="2"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Para
informação de erro e pegando entrada ruim para a função definida pelo usuário
você pode usar:</span></font> <br>
  <code>Assert</code>(<var>bool, string error-message</var>) 
<p><code>Try ... Catch</code>: <span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA"><font size="2">esta
é uma função para conferir se <b>surgirá</b> um erro:</font></span>
<pre>Try {
&nbsp; AviSource(&quot;file.avi&quot;)
}
Catch(err_msg) {
&nbsp;&nbsp; Blackness.Subtitle(err_msg)
}</pre>
<hr>
<h2><a NAME="RuntimeFunctions"></a>Funções em tempo de execução</h2>
<p><font size="2"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Há
<a href="corefilters/conditionalfilter.htm" target="main">Conditional
Filters</a> que agora avaliam escritos quando um quadro é processado, assim você
pode mudar variáveis numa base por quadro.</span></font> <br>
<font size="2"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Para
ter mais aplicações tem que haver <a target="main" href="corefilters/conditionalfilter.htm#RuntimeFunctions">Runtime
Functions</a> que avalia o conteúdo do clipe e retorna um valor</span></font>. <strong>v2.5</strong> 
  <br>
  &nbsp;<pre><font size="2"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Um exemplo simples é calcular a média luma para cada quadro e exibi-lo.</span></font>


Version()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # gera um clip de teste 
ConvertToYV12&nbsp;&nbsp; # precisamos de YV12
FadeIn(10)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # faça a variável luma assim vemos algo acontecer

ScriptClip(&quot; Subtitle(String(AverageLuma())) &quot;)&nbsp; # avalia Subtitle(...) em cada quadro
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # a saída de AverageLuma é convertida em string
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # e Subtitulada no clipe de entrada
ConvertToRgb&nbsp;&nbsp;&nbsp; # visualizar em RGB</pre>
<hr>
<h2><a NAME="ControlFunctions"></a>Funções de Controle </h2>
<p><code>SetMemoryMax</code> (<var>int</var>): Fixa a memória máxima que AviSynth
usa (em MB)<strong> v2</strong><br>
<font size="2"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Em
algumas versões há um ajuste padrão de 5 Mb que é bem baixo. Se você
encontra problemas (por exemplo baixa velocidade) tente fixar este valor em pelo
menos 32 Mb.</span></font><p><code>SetWorkingDir</code> (<var>string</var>):
Estabelece o diretório padrão para o Avisynth. <strong>v2</strong> <br>
<font size="2"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Isto
é antes de tudo, para fácil carga dos clipes de fonte, etc. Não afeta auto
carga dos plug-ins. Valor de retôrno: 0 se bem sucedido, -1 em caso contrário.</span></font>
<hr>
<h2><a NAME="ClipProperties"></a>Propriedades do Clipe</h2>
<p><font size="2"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Estas
funções pegam um clipe como entrada e retornam uma propriedade do clipe.</span></font> 
<p><code>Width</code> (<var>clip</var>)<br>
  <code>Height</code> (<var>clip</var>)<br>
  <code>Framecount</code> (<var>clip</var>)<br>
  <code>Framerate</code> (<var>clip</var>)<br>
  <code>FramerateNumerator</code> (<var>clip</var>) <strong>v2.55</strong><br>
  <code>FramerateDenominator</code> (<var>clip</var>) <strong>v2.55</strong><br>
  <code>Audiorate</code> (<var>clip</var>)<br>
  <code>Audiolength</code> (<var>clip</var>) - (nota: 2^31 limite de amostras)<br>
  <code>AudiolengthF</code> (<var>clip</var>) - (<font size="2"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">retornam</span></font>
as amostras de número como flutuantes) <strong>v2.55</strong><br>
  <code>Audiochannels</code> (<var>clip</var>)<br>
  <code>Audiobits</code> (<var>clip</var>)<br>
  <code>IsAudioFloat</code> (<var>clip</var>) <strong>v2.55</strong><br>
  <code>IsAudioInt</code> (<var>clip</var>) <strong>v2.55</strong><br>
  <code>IsRGB</code> (<var>clip</var>)<br>
  <code>IsRGB24</code> (<var>clip</var>)<br>
  <code>IsRGB32</code> (<var>clip</var>)<br>
  <code>IsYUY2</code> (<var>clip</var>)<br>
  <code>IsYV12</code> (<var>clip</var>) <strong>v2.51</strong><br>
  <code>IsYUV</code> (<var>clip</var>) <strong>v2.54</strong> <br>
  <code>IsPlanar</code> (<var>clip</var>) <strong>v2.51</strong> <br>
  <code>IsInterleaved</code> (<var>clip</var>) <strong>v2.51</strong> <br>
  <code>IsFieldBased</code> (<var>clip</var>)<br>
  <code>IsFrameBased</code> (<var>clip</var>)<br>
  <code>GetParity</code> (<var>clip</var>) <br>
  <code>HasAudio</code> (<var>clip</var>) <strong>v2.56</strong> <br>
  <code>HasVideo</code> (<var>clip</var>) <strong>v2.56</strong> <br>
<pre><font size="2"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Não esqueça: você pode usar as Propriedades com a variável implícita LAST ou em notação OOP:</span></font>
BilinearResize(Width/2, Height/2)
&nbsp;&nbsp; é o mesmo que
BilinearResize(Width(Last)/2, Height(Last)/2)
&nbsp;&nbsp; é o mesmo que
BilinearResize(Last.Width / 2, Last.Height / 2)</pre>
<p> 
<hr>
<h2><a NAME="userdefined"></a>Funções Definidas pelo Usuário&nbsp; </h2>
<p><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Você
pode definir suas próprias funções. Isto é explicado melhor por um exemplo</span></font>: <br>
  &nbsp; 
<pre>Function NTSC2PAL( clip c) {
&nbsp;&nbsp;&nbsp; Assert(c.height == 480, &quot;NTSC2PAL: <font size="2">O clipe de entrada deve ter 480 linhas de<span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA"> scan</span></font>&quot;)
&nbsp;&nbsp;&nbsp; Bob(c, height=576)
&nbsp;&nbsp;&nbsp; return Weave()
}</pre>
<p>Até funções recursivas podem ser definidas. <br>
  &nbsp; 
<pre>function TRANSITION(clip clip, int start,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int expo, int overlap)
{
&nbsp;&nbsp; return ( start &gt;= clip.framecount-expo ?&nbsp;
&nbsp;&nbsp; \&nbsp;&nbsp; Trim(clip,start,0) :&nbsp;
&nbsp;&nbsp; \&nbsp;&nbsp; Dissolve(Trim(clip,start,start+expo-1),
&nbsp;&nbsp; \&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TRANSITION(clip,start+expo,expo,overlap),
&nbsp;&nbsp; \&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; overlap&nbsp;
&nbsp;&nbsp; \&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )
}</pre>
<p> 
<hr>
<h2><a NAME="multiclip"></a>Funções com mais de um clipe de entrada </h2>
<p><font size="2"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Há
algumas funções que combinam dois ou mais clipes de modos diferentes. Como o
conteúdo de vídeo é calculado, é descrito para cada função, mas aqui está
um resumo de quais propriedades o clipe resultante terá.</span></font> 
<p><font size="2"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Os
clipes de entrada sempre devem ter o mesmo formato de cor e - com a exceção da
Camada - as mesmas dimensões.</span></font>&nbsp; 
<table BORDER >
  <tr> 
    <td></td>
    <td> 
      <p align="center"><b>taxa de </b><b>quadro</b></p>
    </td>
    <td COLSPAN="2"> 
      <p align="center"><b>contador de </b><b>quadro</b></p>
    </td>
    <td> 
      <center>
        <b>conteúdo de áudio</b></center>
    </td>
    <td> 
      <center>
        <b>taxa de amostra de áudio</b>
      </center>
    </td>
  </tr>
  <tr> 
    <td><b>AlignedSplice, UnalignedSplice</b></td>
    <td ROWSPAN="6"> 
      <p align="center">primeiro clipe</p>
    </td>
    <td> 
      <center>
        soma de todos os clipes
      </center>
    </td>
    <td></td>
    <td> 
      <p align="center">veja descrição do filtro&nbsp;</p>
    </td>
    <td ROWSPAN="7"> 
      <p align="center"> 
      primeiro clipe</p>
    </td>
  </tr>
  <tr> 
    <td><b>Dissolve</b></td>
    <td> 
      <p align="center">soma de todos os clipes menos a sobreposição</p>
    </td>
    <td></td>
    <td> 
      <p align="center">veja descrição do filtro&nbsp;</p>
    </td>
  </tr>
  <tr> 
    <td><b>MergeLuma, MergeChroma</b></td>
    <td ROWSPAN="2"> 
      <p align="center">primeiro clipe</p>
    </td>
    <td ROWSPAN="5"> 
      <p align="center">o último quadro do clipe menor é repetido até o fim&nbsp;</p>
    </td>
    <td ROWSPAN="5"> 
      <p align="center"> 
      primeiro clipe</p>
    </td>
  </tr>
  <tr> 
    <td><b>Layer</b></td>
  </tr>
  <tr> 
    <td><b>Subtract</b></td>
    <td ROWSPAN="2"> 
      <p align="center"> clipe maior&nbsp;</p>
    </td>
  </tr>
  <tr> 
    <td><b>StackHorizontal, StackVertical</b></td>
  </tr>
  <tr> 
    <td><b>Interleave</b></td>
    <td> 
      <center>
        (fps do primeiro clipe) <br>
        x <br>
        (número de clipes)
      </center>
    </td>
    <td> 
      <p align="center">
        2x o contador de quadro do clipe maior</p>
    </td>
  </tr>
</table>
<p><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Como
você pode ver as funções não são completamente simétricas, mas contêm
alguns atributos do PRIMEIRO clipe.</span></font> <br>
<hr>
<h2><a NAME="Plugins"></a>Plugins </h2>
<p><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Com
estas funções você pode acrescentar outras externas ao AviSynth.</span></font> 
<p><code>LoadPlugin</code> (<var>&quot;filename&quot; [, ...]</var>) 
<p><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Carrega
um ou mais plugins externo do Avisynth (DLLs).</span></font> <br>
<hr>
<p><code>LoadVirtualDubPlugin</code> (<var>&quot;filename&quot;,
&quot;filtername&quot;, preroll</var>) 
<p><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Isto
carrega um plugin escrito para VirtualDub. “filename” é o nome do arquivo
de .vdf. Depois de chamar esta função, o filtro será conhecido como
“filename” em Avisynth. Os filtros do VirtualDub só suportam RGB32. Se
acontecer o vídeo estar em formato RGB24, então você tem que usar
ConvertToRGB32 (ConvertToRGB não será o bastante).</span></font> 
<p><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Algumas
saídas de filtro dependem dos quadros anteriores; para isso deve ser fixado
pelo menos o número de quadros que o filtro precisa processar antes, para
encher seus <i>buffers</i> e atualizar suas variáveis internas.</span></font> <br>
<hr>
<p><code>LoadVFAPIPlugin</code> (<var>&quot;filename&quot;,
&quot;filtername&quot;</var>)
<p><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA"><font size="2" face="Microsoft Sans Serif">Isto
lhe permite usar plugins VFAPI (plugins de importação TMPGEnc).</font></span><br>
<hr>
<p><code>LoadCPlugin</code> (<var>&quot;filename&quot; [, ...]</var>)</p>
<p><font size="2"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA"><font face="Microsoft Sans Serif">C-plugins
deve ser carregado com LoadCPlugin.&nbsp; Conselho: mantenha este plugin fora de
seu diretório de auto carga de plugin para prevenir travamentos. <a href="http://forum.doom9.org/showthread.php?s=&amp;threadid=58840">[discussão]</a>
</font></span></font><a href="http://kevin.atkinson.dhs.org/avisynth_c/"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA"><font face="Microsoft Sans Serif" size="2">[AVISynth
C API (por kevina20723)]</font></span></a></p>
<hr>
<h2><a NAME="autoloading"></a>Auto carga e precedência de nome de Plugin <strong>v2</strong></h2>
<p><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">É
possível pôr todos os arquivos de plugins e escritos com funções definidas
pelo usuário ou variáveis (globais) em um diretório onde todos os arquivos
com a extensão .AVS e .DLL são carregados ao iniciar, descarregados e então
carregados dinamicamente quando o escrito precisar deles.</span></font> 
<p><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Escritos
neste diretório devem conter só definições de função e variáveis globais,
nenhuma seção de processo principal (outros erros estranhos podem acontecer),
também não é recomendado pôr outros arquivos nesse diretório.</span></font> 
<p style="margin-top: 0; margin-bottom: 0">&nbsp; 
<p style="margin-top: 0; margin-bottom: 0"><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">O
diretório é armazenado no registro (a chave de registro mudou para a v2.5).
Você pode usar clicando duas vezes num arquivo.REG com as seguintes linhas e
fixar o caminho (claro, inserindo seu caminho atual):</span></font> <br>
&nbsp; 
<pre style="margin-top: 0; margin-bottom: 0">REGEDIT4


[HKEY_LOCAL_MACHINE\SOFTWARE\Avisynth]
&quot;PluginDir2_5&quot;=&quot;c:\\program files\\avisynth\\plugins&quot;</pre>
<p style="margin-top: 0; margin-bottom: 0"><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">A
ordem na qual nomes de função têm precedência é como segue:</span></font></p>
<pre style="margin-top: 0; margin-bottom: 0">função definida pelo usuário (sempre tem a mais alta prioridade)
   função plugin (tem prioridade mais alta que a funções internas - sobrepõe uma função interna)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; função interna</pre>
<p style="margin-top: 0; margin-bottom: 0"><font size="2" face="Microsoft Sans Serif"><span style="mso-fareast-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">Dentro
desses grupos a função carregada afinal tem precedência, não há nenhum erro
num conflito de espaço de nome.</span></font> </p>
<p style="margin-top: 0; margin-bottom: 0">&nbsp; </p>
<h2 style="margin-top: 0; margin-bottom: 0"><a NAME="autoloading_confl"></a>Auto carga e nomes de funções de conflitos
de Plugin <strong>v2.55</strong> </h2>
<p><span style="font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:&quot;Microsoft Sans Serif&quot;;mso-fareast-font-family:&quot;Times New Roman&quot;;
mso-bidi-font-family:&quot;Times New Roman&quot;;mso-ansi-language:PT-BR;mso-fareast-language:
PT-BR;mso-bidi-language:AR-SA">A partir da v2.55 há o suporte à
DLLName_function(). O problema é que os dois plugins podem ter funções
diferentes que são nomeadas iguais. Para chamar o que é preciso, o suporte
DLLName_function () é incluído. Só aceita plugins auto-carregados. Não gera
os nomes adicionais para plug-ins carregados com LoadPlugin.</span> </p>
<p><b>Alguns exemplos:</b> </p>
<pre># usa fielddeinterlace de decomb510.dll
AviSource(&quot;D:\captures\jewel.avi&quot;)
decomb510_fielddeinterlace(blend=false)</pre>
<p><span style="font-size: 10.0pt; mso-bidi-font-size: 12.0pt; font-family: Microsoft Sans Serif; mso-fareast-font-family: Times New Roman; mso-bidi-font-family: Times New Roman; mso-ansi-language: PT-BR; mso-fareast-language: PT-BR; mso-bidi-language: AR-SA">S</span><span style="font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:&quot;Microsoft Sans Serif&quot;;mso-fareast-font-family:&quot;Times New Roman&quot;;
mso-bidi-font-family:&quot;Times New Roman&quot;;mso-ansi-language:PT-BR;mso-fareast-language:
PT-BR;mso-bidi-language:AR-SA">uponha ter&nbsp; os plugins mpeg2dec.dll e
mpeg2dec3.dll em seu diretório de auto plug-in e você quer carregar um arquivo
d2v com mpeg2dec.dll (que produz YUY2):</span> </p>
<pre># usando mpeg2source de mpeg2dec.dll
mpeg2dec_mpeg2source(&quot;F:\From_hell\from_hell.d2v&quot;)</pre>
<p>ou com mpeg2dec3.dll (<span style="font-size:10.0pt;mso-bidi-font-size:12.0pt;
font-family:&quot;Microsoft Sans Serif&quot;;mso-fareast-font-family:&quot;Times New Roman&quot;;
mso-bidi-font-family:&quot;Times New Roman&quot;;mso-ansi-language:PT-BR;mso-fareast-language:
PT-BR;mso-bidi-language:AR-SA">que produz </span>YV12): </p>
<pre># usando mpeg2source de mpeg2dec3.dll
mpeg2dec3_mpeg2source(&quot;F:\From_hell\from_hell.d2v&quot;)</pre>
<p><kbd>$Date: 2006/03/26 18:11:19 $ Portuguese translation by RoLon</kbd></p>
</body>
</html>
