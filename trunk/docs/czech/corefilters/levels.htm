<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-2">
   <title>Levels Avisynth Filter</title>
   <link rel="stylesheet" type="text/css" href="../../avisynth.css">
</head>
<body >
<h2>
<a NAME="Levels"></a>Levels
</h2>
<p><code>Levels </code>(<var>clip, int input_low, float gamma, int input_high,
int output_low, int output_high, bool "coring"</var>)
<p>Filtr&nbsp; <code>Levels</code>&nbsp;upravuje jas (brightnes),&nbsp;kontrast, a
gamma (které musí být&nbsp;&gt;
0).&nbsp;Parametry <var>input_low</var> a <var>input_high</var>&nbsp;urèují&nbsp;jaké hodnoty vstupního&nbsp;pixelu jsou pova¾ovány za plnì èerné a&nbsp;plnì bílé,&nbsp;parametry <var>output_low</var>
a <var>output_high</var>&nbsp;urèují výstupní hodnoty&nbsp;odpovídající&nbsp;plnì èerné&nbsp;a&nbsp;bílé a parametr <var>gamma</var>    
   &nbsp;øídí stupeò nelinearity pøevodu. Abychom byli pøesní,&nbsp;funkce pøevodu
je:<br>
<blockquote>output = [(input - input_low) / (input_high -
input_low)]<sup>1/gamma</sup>
(output_high - output_low) + output_low</blockquote>Toto je jeden z filtrù pro který by bylo opravdu výborné mít&nbsp;GUI. Proto¾e nemohu nabídnout&nbsp;GUI (minimálnì v&nbsp;souèasné&nbsp;formì&nbsp;AviSynthu),
rozhodl jsem se, ¾e bych ho mohl&nbsp;udìlat&nbsp;aspoò kompatibilní s filtry&nbsp;VirtualDubu&nbsp;pokud je klip v&nbsp;RGB. V tom pøípadì
je mo¾né vzít èísla z VirtualDub dialogu&nbsp;Levels&nbsp;a&nbsp;vlo¾it je za parametry filtru&nbsp; <code>Levels</code>&nbsp;a získat stejný výsledek. Nicménì, vstupní a výstupní parametry&nbsp;mohou být vìt¹í ne¾&nbsp;255.
<p>Kdy¾ jsou data zpracovávaná v YUV re¾imu, <code>Levels</code> provádí&nbsp;pouze gamma-korekci&nbsp;jasové 
informace,&nbsp;ne barevné.
Gamma&nbsp;korekce je&nbsp;ve skuteènosti koncepce formátu&nbsp;RGB, a nevím jak ji nále¾itì provést&nbsp;v YUV. Nicménì,&nbsp;pokud je&nbsp; <var>gamma</var> = 
1.0,&nbsp;mìl by mít filtr&nbsp;stejný efekt&nbsp;v RGB&nbsp;i
v&nbsp;YUV re¾imu. Pro úpravu jasu nebo kontrastu&nbsp;je lep¹í pou¾ít&nbsp; <A href="tweak.htm">Tweak</A>&nbsp;nebo <A href="coloryuv.htm">ColorYUV</A>,&nbsp;proto¾e <code>Levels</code>  
  také mìní barevnost klipu.
<p>Ve&nbsp; <em>v2.53</em>&nbsp;pøidán 
volitelný parametr&nbsp; <var>coring</var> = <var>true/false</var>       (true&nbsp;jako výchozí, co¾ odrá¾í zpùsob&nbsp;práce star¹ích verzí).<br>
 <var>coring</var> = true: vstupní jas&nbsp;(luma)&nbsp;je 
omezen&nbsp;na&nbsp;[16,235] (i&nbsp;barevnost-chroma [16,240]), výsledek je&nbsp;*roz¹íøen*&nbsp;z [16,235]&nbsp;na [0,255], pøevod bere v souladu&nbsp;s vý¹e uvedenou formulí, a&nbsp;výstup je&nbsp;*zú¾en*&nbsp;zpìt&nbsp;z&nbsp;[0,255]&nbsp;na [16,235].<br>
 <var>coring</var> = false:  pøevod se provádí v souladu s vý¹e uvedenou formulí.
<pre># nedìlá nic s [16,235] klipem, ale omezí (nebo zaokrouhlí) klip s rozsahem [0,255] na klip s rozsahem [16,235]:
Levels(0, 1, 255, 0, 255)

# vstup je roz¹íøen z [16,235] na [0,255], provede se pøevod [0,255]-&gt;[16,235] (podle formule),
# a výstup je zpátky zú¾en z [0,255] na [16,235]: (napøíklad: hodnoty jasu (luma) v [0,16] jsou v¹echny pøevedeny na 30)
Levels(0, 1, 255, 16, 235)

# gamma-korekce obrazu pro zobrazení ve svìtlém okolí:
# pøíklad: jas 16 zùstává 16, 59 je pøevedeno na 79, atd.
Levels(0, 1.3, 255, 0, 255)

# invertuje obraz (vytváøí foto-negativ):
# pøíklad: jas 16 je pøeveden na 235
Levels(0, 1, 255, 255, 0)

# nedìlá nic s klipem o rozsahu [0,255] ; nedìlá nic s klipem o rozsahu [16,235]:
Levels(0, 1, 255, 0, 255, coring=false)

# zù¾í rozsah klipu z [0,255] na [16,235]:
Levels(0, 1, 255, 16, 235, coring=false) # je to stejné jako ColorYUV(levels=&quot;PC-&gt;TV&quot;)

#roz¹íøí rozsah klipu z [16,235] na [0,255]:
Levels(16, 1, 235, 0, 255, coring=  false) # je to stejné jako ColorYUV(levels=&quot;TV-&gt;PC&quot;)</pre>

<p><kbd>$English Date: 2005/11/15 21:23:11 $</kbd></p>
<P><KBD>Èeský pøeklad:20.6.2008</KBD></P>
<form><input TYPE="button" VALUE="Zpìt"
 onClick="history.go(-1)"></form>
</body>
</html>








