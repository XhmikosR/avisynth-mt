<html>
<head>
<title>NoMoSmooth</title>
<link rel="stylesheet" type="text/css" href="../../avisynth.css">
</head>

<body>
<h1>NoMoSmooth</h1>
<h2>Pøehled</h2>
<b>autor:</b> Sansgrip (Ross Thomas), verzi 0.1b pro AviSynth 2.5 zkompiloval Wilbert<br>
<b>verze:</b>  0.1b<br>
<b>stáhnout:</b>&nbsp;<a href="http://kvcd.net/sansgrip/avisynth/">http://kvcd.net/sansgrip/avisynth/</a>, 
<a href="http:/www.avisynth.org/warpenterprises/">http://www.avisynth.org/warpenterprises/</a><br>
<b>kategorie:</b>  Prostorovì-èasové odšumovaèe<br>
<b>požadavky:</b>  YUY2 Barevné prostøedí
<hr>
<h2>Popis</h2>
<p>Pokud se jedná o vyhlazovaèe, existují dva hlavní druhy: 
  èasové (temporal) vyhlazovaèe a prostorové (spatial) vyhlazovaèe. Èasové vyhlazovaèe pracují tak, že 
  se dívají na snímky kolem aktuálního a prùmìrují odpovídající pixely dohromady, 
  v pøípadì, že jsou považovány za dostateènì podobné (a proto by mohly být šumem). Prostorové vyhlazovaèe 
  pracují podobným zpùsobem, kromì toho, že se dívají na okolní pixely uvnitø toho samého snímku. 
  Nìkteré filtry jsou hybridy tìchto dvou, vèetnì tohoto a výborného 
  Convolution3D.</p>
<p>Každý pøístup má své výhody a nevýhody. Výbornou vìcí u èasových 
  vyhlazovaèù je, že dìlají fantastickou práci pøi vyèištìní šumu, když je správnì 
  nastavíte, ale také mohou generovat nìkteré velmi ošklivé artefakty, obzvláštì 
  když pracujete s pohybem. Prostorové vyhlazovaèe, mohou být na druhou stranu celkem 
  destruktivní k detailùm vašeho obrazu, ale jsou výborné v oblastech se silným pohybem 
  protože ty mají málo detailù a pro zpozorování artefaktù se ostatnì pohybují pøíliš rychle.</p>
<p>Ideální by pak bylo, kdyby se èasový vyhlazovaè použil na relativnì statické 
  oblasti a prostorový vyhlazovaè na pohyblivé. To je to, co se tento filtr pokouší 
  dìlat, a cílem je dosáhnou vyšší kvality výsledku (t.j. ménì viditelné vyhlazení) 
  než u Convolution3D , ale s menším dopadem na komprimovatelnost.</p>
<p>Navíc k tomuto pøístupu založenému na pohybu, NoMoSmooth používá další techniku 
  ve snaze zachovat tolik existujících detailù kolik je možné: jsou vyhlazovány jen ty pixely, které jsou 
  &quot;fluktuaèní&quot;. Jinými slovy, jsou dané tøi snímky v øadì s aktuálním snímkem 
  uprostøed, provìøovaný pixel bude uvažován jen pro jeden typ vyhlazování, 
  pokud je buï vìtší než oba odpovídající pixely v pøedchozím a následujícím snímku,
  nebo menší než oba. To by mohlo být považováno za velmi zjednodušený 
  &quot;detektor šumu&quot; a zdá se, že pomùže snížit èasové vyhlazení  
  dùležitých detailù jako ty v odstínech kùže.</p>
<h2>Použití</h2>
<blockquote> 
  <p><code>NoMoSmooth</code> (<var>clip, int &quot;motion_threshold&quot;, int
  &quot;temporal_radius&quot;, 
    int &quot;temporal_threshold&quot;, int &quot;spatial_radius&quot;, int
  &quot;spatial_threshold&quot;, 
    bool &quot;show&quot;</var>)</p>
</blockquote>
<table border="1">
  <tr> 
    <th>Parametr</th>
    <th>Význam</th>
    <th>Výchozí</th>
  </tr>
  <tr> 
    <td><var>motion_threshold</var></td>
    <td> 
      <p>Ovládá jak má být detektor pohybu citlivý, nižší hodnoty 
        jsou citlivìjší (vidí více pohybu) a vyšší jsou ménì citlivé. 
        V pozdìjší verzi tohoto souboru bych mohl jít do více podrobností algoritmu,  
        ale zatím, pokud vás to zajímá, se podívejte do zdrojového kódu.</p>
    </td>
    <td>40</td>
  </tr>
  <tr> 
    <td><var>temporal_radius</var></td>
    <td>Urèuje jak daleko si èasový vyhlazovaè v klipu troufne pracovat. 
      Pokud je nastaven na 2, je zkoumáno provìøováno celkem 5 snímkù, 2 na každou &quot; stranu&quot; 
      toho aktuálního.</td>
    <td>1</td>
  </tr>
  <tr> 
    <td><var>temporal_threshold</var></td>
    <td>Když èasový vyhlazovaè prùmìruje, zapoèítá pouze hodnoty uvnitø této 
      prahové hodnoty pixelu v aktuálním snímku.</td>
    <td>6</td>
  </tr>
  <tr> 
    <td><var>spatial_radius</var></td>
    <td>Urèuje kolik pixelù bude prostorový vyhlazovaè uvažovat pøi své práci. 
      Když je nastaven na 2 , je provìøeno celkem 25 pixelù, s aktuálním 
      pixelem ve støedu.</td>
    <td>1</td>
  </tr>
  <tr> 
    <td><var>spatial_threshold</var></td>
    <td>Prostorový vyhlazovaè zapoèítá jen hodnoty uvnitø této prahové hodnoty, když  
      prùmìruje.</td>
    <td>3</td>
  </tr>
  <tr>
    <td><var>show</var></td>
    <td>Pukud je true, neuskuteèní se žádné vyhlazování, ale oblasti považované za pohyblivé 
      (v souladu s parametrem <i>motion_threshold</i> ) budou zvýraznìny 
      líbivou svìtle šedou.</td>
    <td>false</td>
  </tr>
</table>
<h2>Známé problémy</h2>
<ul>
  <li>Pixely uvnitø <i>spatial_radius</i> okrajù nejsou zpracovány.</li>
  <li>Snímky uvnitø <i>temporal_radius</i> na zaèátku a konci klipu nejsou zpracovány. </li>
  <li>Zatímco algoritmus je celkem dobøe optimalizován je stále docela pomalý, ale 
    velmi krátké testy ukazují, že by mohl být trochu rychlejší než Convolution3D v režimu 
    preset=&quot;movieHQ&quot; .</li>
</ul>
<h2>Autorská práva</h2>
<p>Na tomto kódu nejsou žádná autorská práva, a nejsou žádné podmínky k jeho distribuci 
  nebo použití. Dìlejte s ním co chcete.</p>
<h2>Na dopracování</h2>
<ul>
  <li>Optimalizace jak algoritmická tak verze implementace kódu assembleru  
    kritických èástí algoritmu.</li>
  <li>Vylepšení detektoru pohybu, tak že bude citlivìjší na pohyb v oblastech s nižším kontrastem. </li>
</ul>
<h2>Autor</h2>
<p>Ross Thomas &lt;ross zavináè grinfinity.com&gt;</p>
<h2>Historie</h2>
<table border="1">
  <tr> 
    <th>Verze</th>
    <th>Popis</th>
  </tr>
   <tr>
    <td>0.1b</td>
    <td>Compiled for AviSynth v2.5 by Wilbert. [YUY2 required!] 
  </td>
  </tr>  
  <tr>
    <td>0.1a</td>
    <td>Fixed off-by-one error that caused an access violation when height &gt; 
      462.</td>
  </tr>
  <tr> 
    <td>0.1</td>
    <td>Total rewrite with a number of algorithmic improvements, much more verbose 
      comments and widespread use of assertions. Made brief preparations for an 
      eventual YV12 version. Implemented &quot;noise detector&quot;. First official 
      (yet still alpha) release. </td>
  </tr>
  <tr> 
    <td>0.0c</td>
    <td>Back on track. Rewrote again, this time making a conscious effort not 
      to duplicate code already in the core. Implemented a motion detector so 
      that areas in motion get spatially softened and static areas get softened 
      temporally. The name &quot;NoMoSmooth&quot; makes less sense every time 
      I read it.</td>
  </tr>
  <tr> 
    <td>0.0b</td>
    <td>Highly embarrassing version algorithmically identical to TemporalSoften 
      which must never be spoken of again.</td>
  </tr>
  <tr> 
    <td>0.0a</td>
    <td>Rewrote from scratch and optimized the algorithm somewhat, so now is slightly 
      faster. A change in the algorithm both removed the need for <i>noise_threshold</i> 
      and made <i>show</i> mode extremely difficult to implement.</td>
  </tr>
  <tr> 
    <td> 0.0</td>
    <td>Proof of concept code. Hard hats must be worn in this area.</td>
  </tr>
</table>
<p><kbd>$English Date: 2006/12/15 19:29:25 $</kbd></p>
<p><kbd>Èeský pøeklad:28.4.2009</kbd></p>
</body>
</html>
