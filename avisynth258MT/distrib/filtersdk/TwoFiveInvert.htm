<!DOCTYPE html
          PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html   xmlns   = "http://www.w3.org/1999/xhtml">
<head>
<link rel="STYLESHEET" href="filtersdk.css" type="text/css" />
<title>TwoFiveInvert - AviSynth</title>
</head>
<BODY>

<div id="body">

<h1><a href="http://www.avisynth.org/TwoFiveInvert" style="text-decoration:none">
    TwoFiveInvert</a>
    	<p>
	</h1>


<p><tt>#include "avisynth.h"</tt></p>


<p><tt>class Invert : public GenericVideoFilter {</tt></p>

<dl><dd><tt>public:</tt>
</dd>
<dd><tt>    Invert(PClip _child) : GenericVideoFilter(_child) {}</tt>
</dd>
<dd><tt>    PVideoFrame __stdcall GetFrame(int n, IScriptEnvironment* env);</tt>
</dd>
</dl>
<tt>};</tt>

<p><tt>PVideoFrame __stdcall Invert::GetFrame(int n, IScriptEnvironment* env) {</tt></p>

<dl><dd><tt></tt>
</dd>
<dd><tt>    PVideoFrame src = child->GetFrame(n, env);</tt>
</dd>
<dd><tt>    PVideoFrame dst = env->NewVideoFrame(vi);</tt>
</dd>
</dl>

<dl><dd><tt>    const unsigned char* srcpY = src->GetReadPtr(PLANAR_Y);</tt>
</dd>
<dd><tt>    const unsigned char* srcpV = src->GetReadPtr(PLANAR_V);    </tt>
</dd>
<dd><tt>    const unsigned char* srcpU = src->GetReadPtr(PLANAR_U);</tt>
</dd>
</dl>

<dl><dd><tt>    unsigned char* dstpY = dst->GetWritePtr(PLANAR_Y);</tt>
</dd>
<dd><tt>    unsigned char* dstpV = dst->GetWritePtr(PLANAR_V);    </tt>
</dd>
<dd><tt>    unsigned char* dstpU = dst->GetWritePtr(PLANAR_U);</tt>
</dd>
</dl>

<dl><dd><tt>    const int src_pitchY = src->GetPitch(PLANAR_Y);</tt>
</dd>
<dd><tt>    const int src_pitchUV = src->GetPitch(PLANAR_V);</tt>
</dd>
<dd><tt>    const int dst_pitchY = dst->GetPitch(PLANAR_Y);</tt>
</dd>
<dd><tt>    const int dst_pitchUV = dst->GetPitch(PLANAR_U);</tt>
</dd>
</dl>

<dl><dd><tt>    const int row_sizeY = dst->GetRowSize(PLANAR_Y);   // Could also be PLANAR_Y_ALIGNED which would return a mod16 rowsize    </tt>
</dd>
<dd><tt>    const int row_sizeUV = dst->GetRowSize(PLANAR_U);  // Could also be PLANAR_U_ALIGNED which would return a mod8 rowsize    </tt>
</dd>
</dl>

<dl><dd><tt>    const int heightY = dst->GetHeight(PLANAR_Y);</tt>
</dd>
<dd><tt>    const int heightUV = dst->GetHeight(PLANAR_U);</tt>
</dd>
</dl>

<dl><dd><tt>    for (int y = 0; y &lt; heightY; y++) {</tt>
<dl><dd><tt>        for (int x = 0; x &lt; row_sizeY; x++)</tt>
<dl><dd><tt>            dstpY[x] = srcpY[x] ^ 255;</tt>
</dd>
</dl>
</dd>
<dd><tt>        srcpY += src_pitchY;</tt>
</dd>
<dd><tt>        dstpY += dst_pitchY;</tt>
</dd>
</dl>
</dd>
<dd><tt>    }</tt>
</dd>
</dl>

<dl><dd><tt>    for (int y = 0; y &lt; heightUV; y++) {</tt>
<dl><dd><tt>        for (int x = 0; x &lt; row_sizeUV; x++) {</tt>
<dl><dd><tt>            dstpU[x] = srcpU[x] ^ 255;</tt>
</dd>
<dd><tt>            dstpV[x] = srcpV[x] ^ 255;</tt>
</dd>
</dl>
</dd>
<dd><tt>        }</tt>
</dd>
<dd><tt>        srcpU += src_pitchUV;</tt>
</dd>
<dd><tt>        dstpU += dst_pitchUV;</tt>
</dd>
<dd><tt>        srcpV += src_pitchUV;</tt>
</dd>
<dd><tt>        dstpV += dst_pitchUV;</tt>
</dd>
</dl>
</dd>
<dd><tt>    }</tt>
</dd>
<dd><tt>    return dst;</tt>
</dd>
</dl>
<tt>}</tt>

<p><tt>AVSValue __cdecl Create_Invert(AVSValue args, void* user_data, IScriptEnvironment* env) {</tt></p>

<dl><dd><tt>    return new Invert(args[0].AsClip());</tt>
</dd>
</dl>
<tt>}</tt>

<p><tt>extern "C" __declspec(dllexport) const char* __stdcall AvisynthPluginInit2(IScriptEnvironment* env) {</tt></p>

<dl><dd><tt>    env->AddFunction("Invert", "c", Create_Invert, 0);</tt>
</dd>
<dd><tt>    return "`Invert' sample plugin";</tt>
</dd>
</dl>
<tt>}</tt>

<h3>Back to <a href="AviSynthTwoFiveSDK.htm">AviSynthTwoFiveSDK</a></h3></div>
<p><kbd>$Date: 2006/11/24 18:21:26 $<br>
Original version of this document at <a href="http://www.avisynth.org/TwoFiveInvert">http://www.avisynth.org/TwoFiveInvert</a></kbd></p>
</BODY>
</html>
